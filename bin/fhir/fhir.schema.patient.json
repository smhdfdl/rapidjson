{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "id": "http://hl7.org/fhir/json-schema/4.0",
  "description": "see http://hl7.org/fhir/json.html#schema for information about the FHIR Json Schemas",
  "oneOf": [
    {
      "$ref": "#/definitions/Patient"
    }
  ],
  "definitions": {
    "ResourceList": {
      "oneOf": [
        {
          "$ref": "#/definitions/Patient"
        }
      ]
    },  
    "base64Binary": {
      "type": "string",
      "description": "A stream of bytes"
    },
    "boolean": {
      "pattern": "^true|false$",
      "type": "boolean",
      "description": "Value of \"true\" or \"false\""
    },
    "canonical": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "A URI that is a reference to a canonical URL on a FHIR resource"
    },
    "code": {
      "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
      "type": "string",
      "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
    },
    "date": {
      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
      "type": "string",
      "description": "A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates."
    },
    "dateTime": {
      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
      "type": "string",
      "description": "A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates."
    },
    "decimal": {
      "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
      "type": "number",
      "description": "A rational number with implicit precision"
    },
    "id": {
      "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
      "type": "string",
      "description": "Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive."
    },
    "instant": {
      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
      "type": "string",
      "description": "An instant in time - known at least to the second"
    },
    "integer": {
      "pattern": "^-?([0]|([1-9][0-9]*))$",
      "type": "number",
      "description": "A whole number"
    },
    "markdown": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
    },
    "oid": {
      "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
      "type": "string",
      "description": "An OID represented as a URI"
    },
    "positiveInt": {
      "pattern": "^[1-9][0-9]*$",
      "type": "number",
      "description": "An integer with a value that is positive (e.g. \u003e0)"
    },
    "string": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A sequence of Unicode characters"
    },
    "time": {
      "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
      "type": "string",
      "description": "A time during the day, with no date specified"
    },
    "unsignedInt": {
      "pattern": "^[0]|([1-9][0-9]*)$",
      "type": "number",
      "description": "An integer with a value that is not negative (e.g. \u003e\u003d 0)"
    },
    "uri": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "String of characters used to identify a name or a resource"
    },
    "url": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "A URI that is a literal reference"
    },
    "uuid": {
      "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
      "type": "string",
      "description": "A UUID, represented as a URI"
    },
    "xhtml": {
      "description": "xhtml - escaped html (see specfication)"
    },
    "Element": {
      "description": "Base definition for all elements in a resource.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "Extension": {
      "description": "Optional Extension Element - found in all resources.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "url": {
          "description": "Source of the definition for the extension code - a logical name or a URL.",
          "$ref": "#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "valueBase64Binary": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/\u003d]){4}\\s*)+$",
          "type": "string"
        },
        "_valueBase64Binary": {
          "description": "Extensions for valueBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "valueBoolean": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "#/definitions/Element"
        },
        "valueCanonical": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueCanonical": {
          "description": "Extensions for valueCanonical",
          "$ref": "#/definitions/Element"
        },
        "valueCode": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_valueCode": {
          "description": "Extensions for valueCode",
          "$ref": "#/definitions/Element"
        },
        "valueDate": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_valueDate": {
          "description": "Extensions for valueDate",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valueDecimal": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_valueDecimal": {
          "description": "Extensions for valueDecimal",
          "$ref": "#/definitions/Element"
        },
        "valueId": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_valueId": {
          "description": "Extensions for valueId",
          "$ref": "#/definitions/Element"
        },
        "valueInstant": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_valueInstant": {
          "description": "Extensions for valueInstant",
          "$ref": "#/definitions/Element"
        },
        "valueInteger": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueMarkdown": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueMarkdown": {
          "description": "Extensions for valueMarkdown",
          "$ref": "#/definitions/Element"
        },
        "valueOid": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_valueOid": {
          "description": "Extensions for valueOid",
          "$ref": "#/definitions/Element"
        },
        "valuePositiveInt": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_valuePositiveInt": {
          "description": "Extensions for valuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "valueString": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueTime": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_valueTime": {
          "description": "Extensions for valueTime",
          "$ref": "#/definitions/Element"
        },
        "valueUnsignedInt": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_valueUnsignedInt": {
          "description": "Extensions for valueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "valueUri": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUri": {
          "description": "Extensions for valueUri",
          "$ref": "#/definitions/Element"
        },
        "valueUrl": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUrl": {
          "description": "Extensions for valueUrl",
          "$ref": "#/definitions/Element"
        },
        "valueUuid": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_valueUuid": {
          "description": "Extensions for valueUuid",
          "$ref": "#/definitions/Element"
        },
        "valueAddress": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Address"
        },
        "valueAge": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Age"
        },
        "valueAnnotation": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Annotation"
        },
        "valueAttachment": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Attachment"
        },
        "valueCodeableConcept": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/CodeableConcept"
        },
        "valueCoding": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Coding"
        },
        "valueContactPoint": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/ContactPoint"
        },
        "valueCount": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Count"
        },
        "valueDistance": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Distance"
        },
        "valueDuration": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Duration"
        },
        "valueHumanName": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/HumanName"
        },
        "valueIdentifier": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Identifier"
        },
        "valueMoney": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Money"
        },
        "valuePeriod": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Period"
        },
        "valueQuantity": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Quantity"
        },
        "valueRange": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Range"
        },
        "valueRatio": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Ratio"
        },
        "valueReference": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Reference"
        },
        "valueSampledData": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/SampledData"
        },
        "valueSignature": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Signature"
        },
        "valueTiming": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Timing"
        },
        "valueContactDetail": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/ContactDetail"
        },
        "valueContributor": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Contributor"
        },
        "valueDataRequirement": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/DataRequirement"
        },
        "valueExpression": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Expression"
        },
        "valueParameterDefinition": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "valueRelatedArtifact": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "valueTriggerDefinition": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "valueUsageContext": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/UsageContext"
        },
        "valueDosage": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Dosage"
        },
        "valueMeta": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Meta"
        }
      },
      "additionalProperties": false
    },
    "Narrative": {
      "description": "A human-readable summary of the resource conveying the essential clinical and business information for the resource.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "status": {
          "description": "The status of the narrative - whether it\u0027s entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.",
          "enum": [
            "generated",
            "extensions",
            "additional",
            "empty"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "div": {
          "description": "The actual narrative content, a stripped down version of XHTML.",
          "$ref": "#/definitions/xhtml"
        }
      },
      "additionalProperties": false,
      "required": [
        "div"
      ]
    },
    "Annotation": {
      "description": "A  text note which also  contains information about who made the statement and when.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "authorReference": {
          "description": "The individual responsible for making the annotation.",
          "$ref": "#/definitions/Reference"
        },
        "authorString": {
          "description": "The individual responsible for making the annotation.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_authorString": {
          "description": "Extensions for authorString",
          "$ref": "#/definitions/Element"
        },
        "time": {
          "description": "Indicates when this particular annotation was made.",
          "$ref": "#/definitions/dateTime"
        },
        "_time": {
          "description": "Extensions for time",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "The text of the annotation in markdown format.",
          "$ref": "#/definitions/markdown"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Attachment": {
      "description": "For referring to data content defined in other formats.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "contentType": {
          "description": "Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.",
          "$ref": "#/definitions/code"
        },
        "_contentType": {
          "description": "Extensions for contentType",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The human language of the content. The value can be any valid value according to BCP 47.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "data": {
          "description": "The actual data of the attachment - a sequence of bytes, base64 encoded.",
          "$ref": "#/definitions/base64Binary"
        },
        "_data": {
          "description": "Extensions for data",
          "$ref": "#/definitions/Element"
        },
        "url": {
          "description": "A location where the data can be accessed.",
          "$ref": "#/definitions/url"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "size": {
          "description": "The number of bytes of data that make up this attachment (before base64 encoding, if that is done).",
          "$ref": "#/definitions/unsignedInt"
        },
        "_size": {
          "description": "Extensions for size",
          "$ref": "#/definitions/Element"
        },
        "hash": {
          "description": "The calculated hash of the data using SHA-1. Represented using base64.",
          "$ref": "#/definitions/base64Binary"
        },
        "_hash": {
          "description": "Extensions for hash",
          "$ref": "#/definitions/Element"
        },
        "title": {
          "description": "A label or set of text to display in place of the data.",
          "$ref": "#/definitions/string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "creation": {
          "description": "The date that the attachment was first created.",
          "$ref": "#/definitions/dateTime"
        },
        "_creation": {
          "description": "Extensions for creation",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Identifier": {
      "description": "An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "use": {
          "description": "The purpose of this identifier.",
          "enum": [
            "usual",
            "official",
            "temp",
            "secondary",
            "old"
          ]
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "system": {
          "description": "Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "value": {
          "description": "The portion of the identifier typically relevant to the user and which is unique within the context of the system.",
          "$ref": "#/definitions/string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Time period during which identifier is/was valid for use.",
          "$ref": "#/definitions/Period"
        },
        "assigner": {
          "description": "Organization that issued/manages the identifier.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false
    },
    "CodeableConcept": {
      "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "coding": {
          "description": "A reference to a code defined by a terminology system.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        },
        "text": {
          "description": "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.",
          "$ref": "#/definitions/string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Coding": {
      "description": "A reference to a code defined by a terminology system.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "system": {
          "description": "The identification of the code system that defines the meaning of the symbol in the code.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "version": {
          "description": "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "display": {
          "description": "A representation of the meaning of the code in the system, following the rules of the system.",
          "$ref": "#/definitions/string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        },
        "userSelected": {
          "description": "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
          "$ref": "#/definitions/boolean"
        },
        "_userSelected": {
          "description": "Extensions for userSelected",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Quantity": {
      "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"\u003c\" , then the real value is \u003c stated value.",
          "enum": [
            "\u003c",
            "\u003c\u003d",
            "\u003e\u003d",
            "\u003e"
          ]
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "$ref": "#/definitions/string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Duration": {
      "description": "A length of time.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"\u003c\" , then the real value is \u003c stated value.",
          "enum": [
            "\u003c",
            "\u003c\u003d",
            "\u003e\u003d",
            "\u003e"
          ]
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "$ref": "#/definitions/string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Distance": {
      "description": "A length - a value with a unit that is a physical distance.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"\u003c\" , then the real value is \u003c stated value.",
          "enum": [
            "\u003c",
            "\u003c\u003d",
            "\u003e\u003d",
            "\u003e"
          ]
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "$ref": "#/definitions/string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Count": {
      "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"\u003c\" , then the real value is \u003c stated value.",
          "enum": [
            "\u003c",
            "\u003c\u003d",
            "\u003e\u003d",
            "\u003e"
          ]
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "$ref": "#/definitions/string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Money": {
      "description": "An amount of economic utility in some recognized currency.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "Numerical value (with implicit precision).",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "currency": {
          "description": "ISO 4217 Currency Code.",
          "$ref": "#/definitions/code"
        },
        "_currency": {
          "description": "Extensions for currency",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Age": {
      "description": "A duration of time during which an organism (or a process) has existed.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"\u003c\" , then the real value is \u003c stated value.",
          "enum": [
            "\u003c",
            "\u003c\u003d",
            "\u003e\u003d",
            "\u003e"
          ]
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "$ref": "#/definitions/string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Range": {
      "description": "A set of ordered Quantities defined by a low and high limit.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "low": {
          "description": "The low limit. The boundary is inclusive.",
          "$ref": "#/definitions/Quantity"
        },
        "high": {
          "description": "The high limit. The boundary is inclusive.",
          "$ref": "#/definitions/Quantity"
        }
      },
      "additionalProperties": false
    },
    "Period": {
      "description": "A time period defined by a start and end date and optionally time.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "start": {
          "description": "The start of the period. The boundary is inclusive.",
          "$ref": "#/definitions/dateTime"
        },
        "_start": {
          "description": "Extensions for start",
          "$ref": "#/definitions/Element"
        },
        "end": {
          "description": "The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.",
          "$ref": "#/definitions/dateTime"
        },
        "_end": {
          "description": "Extensions for end",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Ratio": {
      "description": "A relationship of two Quantity values - expressed as a numerator and a denominator.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "numerator": {
          "description": "The value of the numerator.",
          "$ref": "#/definitions/Quantity"
        },
        "denominator": {
          "description": "The value of the denominator.",
          "$ref": "#/definitions/Quantity"
        }
      },
      "additionalProperties": false
    },
    "Reference": {
      "description": "A reference from one resource to another.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "reference": {
          "description": "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with \u0027#\u0027) refer to contained resources.",
          "$ref": "#/definitions/string"
        },
        "_reference": {
          "description": "Extensions for reference",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.\n\nThe type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. \"Patient\" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).",
          "$ref": "#/definitions/uri"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "identifier": {
          "description": "An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.",
          "$ref": "#/definitions/Identifier"
        },
        "display": {
          "description": "Plain text narrative that identifies the resource in addition to the resource reference.",
          "$ref": "#/definitions/string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "SampledData": {
      "description": "A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "origin": {
          "description": "The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.",
          "$ref": "#/definitions/Quantity"
        },
        "period": {
          "description": "The length of time between sampling times, measured in milliseconds.",
          "$ref": "#/definitions/decimal"
        },
        "_period": {
          "description": "Extensions for period",
          "$ref": "#/definitions/Element"
        },
        "factor": {
          "description": "A correction factor that is applied to the sampled data points before they are added to the origin.",
          "$ref": "#/definitions/decimal"
        },
        "_factor": {
          "description": "Extensions for factor",
          "$ref": "#/definitions/Element"
        },
        "lowerLimit": {
          "description": "The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit).",
          "$ref": "#/definitions/decimal"
        },
        "_lowerLimit": {
          "description": "Extensions for lowerLimit",
          "$ref": "#/definitions/Element"
        },
        "upperLimit": {
          "description": "The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit).",
          "$ref": "#/definitions/decimal"
        },
        "_upperLimit": {
          "description": "Extensions for upperLimit",
          "$ref": "#/definitions/Element"
        },
        "dimensions": {
          "description": "The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.",
          "$ref": "#/definitions/positiveInt"
        },
        "_dimensions": {
          "description": "Extensions for dimensions",
          "$ref": "#/definitions/Element"
        },
        "data": {
          "description": "A series of data points which are decimal values separated by a single space (character u20). The special values \"E\" (error), \"L\" (below detection limit) and \"U\" (above detection limit) can also be used in place of a decimal value.",
          "$ref": "#/definitions/string"
        },
        "_data": {
          "description": "Extensions for data",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "origin"
      ]
    },
    "Signature": {
      "description": "A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        },
        "when": {
          "description": "When the digital signature was signed.",
          "$ref": "#/definitions/instant"
        },
        "_when": {
          "description": "Extensions for when",
          "$ref": "#/definitions/Element"
        },
        "who": {
          "description": "A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).",
          "$ref": "#/definitions/Reference"
        },
        "onBehalfOf": {
          "description": "A reference to an application-usable description of the identity that is represented by the signature.",
          "$ref": "#/definitions/Reference"
        },
        "targetFormat": {
          "description": "A mime type that indicates the technical format of the target resources signed by the signature.",
          "$ref": "#/definitions/code"
        },
        "_targetFormat": {
          "description": "Extensions for targetFormat",
          "$ref": "#/definitions/Element"
        },
        "sigFormat": {
          "description": "A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.",
          "$ref": "#/definitions/code"
        },
        "_sigFormat": {
          "description": "Extensions for sigFormat",
          "$ref": "#/definitions/Element"
        },
        "data": {
          "description": "The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.",
          "$ref": "#/definitions/base64Binary"
        },
        "_data": {
          "description": "Extensions for data",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "type",
        "who"
      ]
    },
    "HumanName": {
      "description": "A human\u0027s name with the ability to identify parts and usage.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "use": {
          "description": "Identifies the purpose for this name.",
          "enum": [
            "usual",
            "official",
            "temp",
            "nickname",
            "anonymous",
            "old",
            "maiden"
          ]
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.",
          "$ref": "#/definitions/string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "family": {
          "description": "The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.",
          "$ref": "#/definitions/string"
        },
        "_family": {
          "description": "Extensions for family",
          "$ref": "#/definitions/Element"
        },
        "given": {
          "description": "Given name.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_given": {
          "description": "Extensions for given",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "prefix": {
          "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_prefix": {
          "description": "Extensions for prefix",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "suffix": {
          "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_suffix": {
          "description": "Extensions for suffix",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "period": {
          "description": "Indicates the period of time when this name was valid for the named person.",
          "$ref": "#/definitions/Period"
        }
      },
      "additionalProperties": false
    },
    "Address": {
      "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "use": {
          "description": "The purpose of this address.",
          "enum": [
            "home",
            "work",
            "temp",
            "old",
            "billing"
          ]
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
          "enum": [
            "postal",
            "physical",
            "both"
          ]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.",
          "$ref": "#/definitions/string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "line": {
          "description": "This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_line": {
          "description": "Extensions for line",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "city": {
          "description": "The name of the city, town, suburb, village or other community or delivery center.",
          "$ref": "#/definitions/string"
        },
        "_city": {
          "description": "Extensions for city",
          "$ref": "#/definitions/Element"
        },
        "district": {
          "description": "The name of the administrative area (county).",
          "$ref": "#/definitions/string"
        },
        "_district": {
          "description": "Extensions for district",
          "$ref": "#/definitions/Element"
        },
        "state": {
          "description": "Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
          "$ref": "#/definitions/string"
        },
        "_state": {
          "description": "Extensions for state",
          "$ref": "#/definitions/Element"
        },
        "postalCode": {
          "description": "A postal code designating a region defined by the postal service.",
          "$ref": "#/definitions/string"
        },
        "_postalCode": {
          "description": "Extensions for postalCode",
          "$ref": "#/definitions/Element"
        },
        "country": {
          "description": "Country - a nation as commonly understood or generally accepted.",
          "$ref": "#/definitions/string"
        },
        "_country": {
          "description": "Extensions for country",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Time period when address was/is in use.",
          "$ref": "#/definitions/Period"
        }
      },
      "additionalProperties": false
    },
    "ContactPoint": {
      "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "system": {
          "description": "Telecommunications form for contact point - what communications system is required to make use of the contact.",
          "enum": [
            "phone",
            "fax",
            "email",
            "pager",
            "url",
            "sms",
            "other"
          ]
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "value": {
          "description": "The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).",
          "$ref": "#/definitions/string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "use": {
          "description": "Identifies the purpose for the contact point.",
          "enum": [
            "home",
            "work",
            "temp",
            "old",
            "mobile"
          ]
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "rank": {
          "description": "Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.",
          "$ref": "#/definitions/positiveInt"
        },
        "_rank": {
          "description": "Extensions for rank",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Time period when the contact point was/is in use.",
          "$ref": "#/definitions/Period"
        }
      },
      "additionalProperties": false
    },
    "Timing": {
      "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "event": {
          "description": "Identifies specific times when the event occurs.",
          "items": {
            "$ref": "#/definitions/dateTime"
          },
          "type": "array"
        },
        "_event": {
          "description": "Extensions for event",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "repeat": {
          "description": "A set of rules that describe when the event is scheduled.",
          "$ref": "#/definitions/Timing_Repeat"
        },
        "code": {
          "description": "A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).",
          "$ref": "#/definitions/CodeableConcept"
        }
      },
      "additionalProperties": false
    },
    "Timing_Repeat": {
      "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "boundsDuration": {
          "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
          "$ref": "#/definitions/Duration"
        },
        "boundsRange": {
          "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
          "$ref": "#/definitions/Range"
        },
        "boundsPeriod": {
          "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
          "$ref": "#/definitions/Period"
        },
        "count": {
          "description": "A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.",
          "$ref": "#/definitions/positiveInt"
        },
        "_count": {
          "description": "Extensions for count",
          "$ref": "#/definitions/Element"
        },
        "countMax": {
          "description": "If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.",
          "$ref": "#/definitions/positiveInt"
        },
        "_countMax": {
          "description": "Extensions for countMax",
          "$ref": "#/definitions/Element"
        },
        "duration": {
          "description": "How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.",
          "$ref": "#/definitions/decimal"
        },
        "_duration": {
          "description": "Extensions for duration",
          "$ref": "#/definitions/Element"
        },
        "durationMax": {
          "description": "If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.",
          "$ref": "#/definitions/decimal"
        },
        "_durationMax": {
          "description": "Extensions for durationMax",
          "$ref": "#/definitions/Element"
        },
        "durationUnit": {
          "description": "The units of time for the duration, in UCUM units.",
          "enum": [
            "s",
            "min",
            "h",
            "d",
            "wk",
            "mo",
            "a"
          ]
        },
        "_durationUnit": {
          "description": "Extensions for durationUnit",
          "$ref": "#/definitions/Element"
        },
        "frequency": {
          "description": "The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.",
          "$ref": "#/definitions/positiveInt"
        },
        "_frequency": {
          "description": "Extensions for frequency",
          "$ref": "#/definitions/Element"
        },
        "frequencyMax": {
          "description": "If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.",
          "$ref": "#/definitions/positiveInt"
        },
        "_frequencyMax": {
          "description": "Extensions for frequencyMax",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 times per day\", 3 would be the frequency and \"1 day\" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.",
          "$ref": "#/definitions/decimal"
        },
        "_period": {
          "description": "Extensions for period",
          "$ref": "#/definitions/Element"
        },
        "periodMax": {
          "description": "If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as \"do this once every 3-5 days.",
          "$ref": "#/definitions/decimal"
        },
        "_periodMax": {
          "description": "Extensions for periodMax",
          "$ref": "#/definitions/Element"
        },
        "periodUnit": {
          "description": "The units of time for the period in UCUM units.",
          "enum": [
            "s",
            "min",
            "h",
            "d",
            "wk",
            "mo",
            "a"
          ]
        },
        "_periodUnit": {
          "description": "Extensions for periodUnit",
          "$ref": "#/definitions/Element"
        },
        "dayOfWeek": {
          "description": "If one or more days of week is provided, then the action happens only on the specified day(s).",
          "items": {
            "$ref": "#/definitions/code"
          },
          "type": "array"
        },
        "_dayOfWeek": {
          "description": "Extensions for dayOfWeek",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "timeOfDay": {
          "description": "Specified time of day for action to take place.",
          "items": {
            "$ref": "#/definitions/time"
          },
          "type": "array"
        },
        "_timeOfDay": {
          "description": "Extensions for timeOfDay",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "when": {
          "description": "An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.",
          "items": {
            "enum": [
              "MORN",
              "MORN.early",
              "MORN.late",
              "NOON",
              "AFT",
              "AFT.early",
              "AFT.late",
              "EVE",
              "EVE.early",
              "EVE.late",
              "NIGHT",
              "PHS",
              "HS",
              "WAKE",
              "C",
              "CM",
              "CD",
              "CV",
              "AC",
              "ACM",
              "ACD",
              "ACV",
              "PC",
              "PCM",
              "PCD",
              "PCV"
            ]
          },
          "type": "array"
        },
        "_when": {
          "description": "Extensions for when",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "offset": {
          "description": "The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.",
          "$ref": "#/definitions/unsignedInt"
        },
        "_offset": {
          "description": "Extensions for offset",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Meta": {
      "description": "The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "versionId": {
          "description": "The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.",
          "$ref": "#/definitions/id"
        },
        "_versionId": {
          "description": "Extensions for versionId",
          "$ref": "#/definitions/Element"
        },
        "lastUpdated": {
          "description": "When the resource last changed - e.g. when the version changed.",
          "$ref": "#/definitions/instant"
        },
        "_lastUpdated": {
          "description": "Extensions for lastUpdated",
          "$ref": "#/definitions/Element"
        },
        "source": {
          "description": "A uri that identifies the source system of the resource. This provides a minimal amount of [[[Provenance]]] information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.",
          "$ref": "#/definitions/uri"
        },
        "_source": {
          "description": "Extensions for source",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].",
          "items": {
            "$ref": "#/definitions/canonical"
          },
          "type": "array"
        },
        "security": {
          "description": "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        },
        "tag": {
          "description": "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "ContactDetail": {
      "description": "Specifies contact information for a person or organization.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of an individual to contact.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "telecom": {
          "description": "The contact details for the individual (if a name was provided) or the organization.",
          "items": {
            "$ref": "#/definitions/ContactPoint"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "Contributor": {
      "description": "A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of contributor.",
          "enum": [
            "author",
            "editor",
            "reviewer",
            "endorser"
          ]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "The name of the individual or organization responsible for the contribution.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the contributor.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "DataRequirement": {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.",
          "$ref": "#/definitions/code"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "The profile of the required data, specified as the uri of the profile definition.",
          "items": {
            "$ref": "#/definitions/canonical"
          },
          "type": "array"
        },
        "subjectCodeableConcept": {
          "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "subjectReference": {
          "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
          "$ref": "#/definitions/Reference"
        },
        "mustSupport": {
          "description": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. \n\nThe value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_mustSupport": {
          "description": "Extensions for mustSupport",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "codeFilter": {
          "description": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND\u0027ed, not OR\u0027ed.",
          "items": {
            "$ref": "#/definitions/DataRequirement_CodeFilter"
          },
          "type": "array"
        },
        "dateFilter": {
          "description": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND\u0027ed, not OR\u0027ed.",
          "items": {
            "$ref": "#/definitions/DataRequirement_DateFilter"
          },
          "type": "array"
        },
        "limit": {
          "description": "Specifies a maximum number of results that are required (uses the _count search parameter).",
          "$ref": "#/definitions/positiveInt"
        },
        "_limit": {
          "description": "Extensions for limit",
          "$ref": "#/definitions/Element"
        },
        "sort": {
          "description": "Specifies the order of the results to be returned.",
          "items": {
            "$ref": "#/definitions/DataRequirement_Sort"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "DataRequirement_CodeFilter": {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "searchParam": {
          "description": "A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.",
          "$ref": "#/definitions/string"
        },
        "_searchParam": {
          "description": "Extensions for searchParam",
          "$ref": "#/definitions/Element"
        },
        "valueSet": {
          "description": "The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
          "$ref": "#/definitions/canonical"
        },
        "code": {
          "description": "The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "DataRequirement_DateFilter": {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "searchParam": {
          "description": "A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.",
          "$ref": "#/definitions/string"
        },
        "_searchParam": {
          "description": "Extensions for searchParam",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valuePeriod": {
          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
          "$ref": "#/definitions/Period"
        },
        "valueDuration": {
          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
          "$ref": "#/definitions/Duration"
        }
      },
      "additionalProperties": false
    },
    "DataRequirement_Sort": {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "direction": {
          "description": "The direction of the sort, ascending or descending.",
          "enum": [
            "ascending",
            "descending"
          ]
        },
        "_direction": {
          "description": "Extensions for direction",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ParameterDefinition": {
      "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the parameter used to allow access to the value of the parameter in evaluation contexts.",
          "$ref": "#/definitions/code"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "use": {
          "description": "Whether the parameter is input or output for the module.",
          "$ref": "#/definitions/code"
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "min": {
          "description": "The minimum number of times this parameter SHALL appear in the request or response.",
          "$ref": "#/definitions/integer"
        },
        "_min": {
          "description": "Extensions for min",
          "$ref": "#/definitions/Element"
        },
        "max": {
          "description": "The maximum number of times this element is permitted to appear in the request or response.",
          "$ref": "#/definitions/string"
        },
        "_max": {
          "description": "Extensions for max",
          "$ref": "#/definitions/Element"
        },
        "documentation": {
          "description": "A brief discussion of what the parameter is for and how it is used by the module.",
          "$ref": "#/definitions/string"
        },
        "_documentation": {
          "description": "Extensions for documentation",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The type of the parameter.",
          "$ref": "#/definitions/code"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.",
          "$ref": "#/definitions/canonical"
        }
      },
      "additionalProperties": false
    },
    "RelatedArtifact": {
      "description": "Related artifacts such as additional documentation, justification, or bibliographic references.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of relationship to the related artifact.",
          "enum": [
            "documentation",
            "justification",
            "citation",
            "predecessor",
            "successor",
            "derived-from",
            "depends-on",
            "composed-of"
          ]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "label": {
          "description": "A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.",
          "$ref": "#/definitions/string"
        },
        "_label": {
          "description": "Extensions for label",
          "$ref": "#/definitions/Element"
        },
        "display": {
          "description": "A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.",
          "$ref": "#/definitions/string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        },
        "citation": {
          "description": "A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.",
          "$ref": "#/definitions/markdown"
        },
        "_citation": {
          "description": "Extensions for citation",
          "$ref": "#/definitions/Element"
        },
        "url": {
          "description": "A url for the artifact that can be followed to access the actual content.",
          "$ref": "#/definitions/url"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "document": {
          "description": "The document being referenced, represented as an attachment. This is exclusive with the resource element.",
          "$ref": "#/definitions/Attachment"
        },
        "resource": {
          "description": "The related resource, such as a library, value set, profile, or other knowledge resource.",
          "$ref": "#/definitions/canonical"
        }
      },
      "additionalProperties": false
    },
    "TriggerDefinition": {
      "description": "A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of triggering event.",
          "enum": [
            "named-event",
            "periodic",
            "data-changed",
            "data-added",
            "data-modified",
            "data-removed",
            "data-accessed",
            "data-access-ended"
          ]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "timingTiming": {
          "description": "The timing of the event (if this is a periodic trigger).",
          "$ref": "#/definitions/Timing"
        },
        "timingReference": {
          "description": "The timing of the event (if this is a periodic trigger).",
          "$ref": "#/definitions/Reference"
        },
        "timingDate": {
          "description": "The timing of the event (if this is a periodic trigger).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_timingDate": {
          "description": "Extensions for timingDate",
          "$ref": "#/definitions/Element"
        },
        "timingDateTime": {
          "description": "The timing of the event (if this is a periodic trigger).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_timingDateTime": {
          "description": "Extensions for timingDateTime",
          "$ref": "#/definitions/Element"
        },
        "data": {
          "description": "The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.",
          "items": {
            "$ref": "#/definitions/DataRequirement"
          },
          "type": "array"
        },
        "condition": {
          "description": "A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.",
          "$ref": "#/definitions/Expression"
        }
      },
      "additionalProperties": false
    },
    "UsageContext": {
      "description": "Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "A code that identifies the type of context being specified by this usage context.",
          "$ref": "#/definitions/Coding"
        },
        "valueCodeableConcept": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "valueQuantity": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/Quantity"
        },
        "valueRange": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/Range"
        },
        "valueReference": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false,
      "required": [
        "code"
      ]
    },
    "Dosage": {
      "description": "Indicates how the medication is/was taken or should be taken by the patient.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "sequence": {
          "description": "Indicates the order in which the dosage instructions should be applied or interpreted.",
          "$ref": "#/definitions/integer"
        },
        "_sequence": {
          "description": "Extensions for sequence",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "Free text dosage instructions e.g. SIG.",
          "$ref": "#/definitions/string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "additionalInstruction": {
          "description": "Supplemental instructions to the patient on how to take the medication  (e.g. \"with meals\" or\"take half to one hour before food\") or warnings for the patient about the medication (e.g. \"may cause drowsiness\" or \"avoid exposure of skin to direct sunlight or sunlamps\").",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "patientInstruction": {
          "description": "Instructions in terms that are understood by the patient or consumer.",
          "$ref": "#/definitions/string"
        },
        "_patientInstruction": {
          "description": "Extensions for patientInstruction",
          "$ref": "#/definitions/Element"
        },
        "timing": {
          "description": "When medication should be administered.",
          "$ref": "#/definitions/Timing"
        },
        "asNeededBoolean": {
          "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_asNeededBoolean": {
          "description": "Extensions for asNeededBoolean",
          "$ref": "#/definitions/Element"
        },
        "asNeededCodeableConcept": {
          "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
          "$ref": "#/definitions/CodeableConcept"
        },
        "site": {
          "description": "Body site to administer to.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "route": {
          "description": "How drug should enter body.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "method": {
          "description": "Technique for administering medication.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "doseAndRate": {
          "description": "The amount of medication administered.",
          "items": {
            "$ref": "#/definitions/Dosage_DoseAndRate"
          },
          "type": "array"
        },
        "maxDosePerPeriod": {
          "description": "Upper limit on medication per unit of time.",
          "$ref": "#/definitions/Ratio"
        },
        "maxDosePerAdministration": {
          "description": "Upper limit on medication per administration.",
          "$ref": "#/definitions/Quantity"
        },
        "maxDosePerLifetime": {
          "description": "Upper limit on medication per lifetime of the patient.",
          "$ref": "#/definitions/Quantity"
        }
      },
      "additionalProperties": false
    },
    "Dosage_DoseAndRate": {
      "description": "Indicates how the medication is/was taken or should be taken by the patient.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The kind of dose or rate specified, for example, ordered or calculated.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "doseRange": {
          "description": "Amount of medication per dose.",
          "$ref": "#/definitions/Range"
        },
        "doseQuantity": {
          "description": "Amount of medication per dose.",
          "$ref": "#/definitions/Quantity"
        },
        "rateRatio": {
          "description": "Amount of medication per unit of time.",
          "$ref": "#/definitions/Ratio"
        },
        "rateRange": {
          "description": "Amount of medication per unit of time.",
          "$ref": "#/definitions/Range"
        },
        "rateQuantity": {
          "description": "Amount of medication per unit of time.",
          "$ref": "#/definitions/Quantity"
        }
      },
      "additionalProperties": false
    },
    "Population": {
      "description": "A populatioof people with some set of grouping criteria.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "ageRange": {
          "description": "The age of the specific population.",
          "$ref": "#/definitions/Range"
        },
        "ageCodeableConcept": {
          "description": "The age of the specific population.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "gender": {
          "description": "The gender of the specific population.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "race": {
          "description": "Race of the specific population.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "physiologicalCondition": {
          "description": "The existing physiological conditions of the specific population to which this applies.",
          "$ref": "#/definitions/CodeableConcept"
        }
      },
      "additionalProperties": false
    },
    "ProductShelfLife": {
      "description": "The shelf-life and storage information for a medicinal product item or container can be described using this class.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "Unique identifier for the packaged Medicinal Product.",
          "$ref": "#/definitions/Identifier"
        },
        "type": {
          "description": "This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "period": {
          "description": "The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "specialPrecautionsForStorage": {
          "description": "Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "period",
        "type"
      ]
    },
    "ProdCharacteristic": {
      "description": "The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "height": {
          "description": "Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "width": {
          "description": "Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "depth": {
          "description": "Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "weight": {
          "description": "Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "nominalVolume": {
          "description": "Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "externalDiameter": {
          "description": "Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "shape": {
          "description": "Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.",
          "$ref": "#/definitions/string"
        },
        "_shape": {
          "description": "Extensions for shape",
          "$ref": "#/definitions/Element"
        },
        "color": {
          "description": "Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_color": {
          "description": "Extensions for color",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "imprint": {
          "description": "Where applicable, the imprint can be specified as text.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_imprint": {
          "description": "Extensions for imprint",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "image": {
          "description": "Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.",
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "type": "array"
        },
        "scoring": {
          "description": "Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.",
          "$ref": "#/definitions/CodeableConcept"
        }
      },
      "additionalProperties": false
    },
    "MarketingStatus": {
      "description": "The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "country": {
          "description": "The country in which the marketing authorisation has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "jurisdiction": {
          "description": "Where a Medicines Regulatory Agency has granted a marketing authorisation for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "status": {
          "description": "This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "dateRange": {
          "description": "The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.",
          "$ref": "#/definitions/Period"
        },
        "restoreDate": {
          "description": "The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.",
          "$ref": "#/definitions/dateTime"
        },
        "_restoreDate": {
          "description": "Extensions for restoreDate",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "country",
        "dateRange",
        "status"
      ]
    },
    "SubstanceAmount": {
      "description": "Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "amountQuantity": {
          "description": "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.",
          "$ref": "#/definitions/Quantity"
        },
        "amountRange": {
          "description": "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.",
          "$ref": "#/definitions/Range"
        },
        "amountString": {
          "description": "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_amountString": {
          "description": "Extensions for amountString",
          "$ref": "#/definitions/Element"
        },
        "amountType": {
          "description": "Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "amountText": {
          "description": "A textual comment on a numeric value.",
          "$ref": "#/definitions/string"
        },
        "_amountText": {
          "description": "Extensions for amountText",
          "$ref": "#/definitions/Element"
        },
        "referenceRange": {
          "description": "Reference range of possible or expected values.",
          "$ref": "#/definitions/SubstanceAmount_ReferenceRange"
        }
      },
      "additionalProperties": false
    },
    "SubstanceAmount_ReferenceRange": {
      "description": "Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "lowLimit": {
          "description": "Lower limit possible or expected.",
          "$ref": "#/definitions/Quantity"
        },
        "highLimit": {
          "description": "Upper limit possible or expected.",
          "$ref": "#/definitions/Quantity"
        }
      },
      "additionalProperties": false
    },
    "Expression": {
      "description": "A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "description": {
          "description": "A brief, natural language description of the condition that effectively communicates the intended semantics.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.",
          "$ref": "#/definitions/id"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The media type of the language for the expression.",
          "enum": [
            "text/cql",
            "text/fhirpath",
            "application/x-fhir-query"
          ]
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "expression": {
          "description": "An expression in the specified language that returns a value.",
          "$ref": "#/definitions/string"
        },
        "_expression": {
          "description": "Extensions for expression",
          "$ref": "#/definitions/Element"
        },
        "reference": {
          "description": "A URI that defines where the expression is found.",
          "$ref": "#/definitions/uri"
        },
        "_reference": {
          "description": "Extensions for reference",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "representation": {
          "description": "Codes that define how this element is represented in instances, when the deviation varies from the normal case.",
          "items": {
            "enum": [
              "xmlAttr",
              "xmlText",
              "typeAttr",
              "cdaText",
              "xhtml"
            ]
          },
          "type": "array"
        },
        "_representation": {
          "description": "Extensions for representation",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "sliceName": {
          "description": "The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.",
          "$ref": "#/definitions/string"
        },
        "_sliceName": {
          "description": "Extensions for sliceName",
          "$ref": "#/definitions/Element"
        },
        "sliceIsConstraining": {
          "description": "If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.",
          "$ref": "#/definitions/boolean"
        },
        "_sliceIsConstraining": {
          "description": "Extensions for sliceIsConstraining",
          "$ref": "#/definitions/Element"
        },
        "label": {
          "description": "A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.",
          "$ref": "#/definitions/string"
        },
        "_label": {
          "description": "Extensions for label",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A code that has the same meaning as the element in a particular terminology.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        },
        "slicing": {
          "description": "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).",
          "$ref": "#/definitions/ElementDefinition_Slicing"
        },
        "short": {
          "description": "A concise description of what this element means (e.g. for use in autogenerated summaries).",
          "$ref": "#/definitions/string"
        },
        "_short": {
          "description": "Extensions for short",
          "$ref": "#/definitions/Element"
        },
        "definition": {
          "description": "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).",
          "$ref": "#/definitions/markdown"
        },
        "_definition": {
          "description": "Extensions for definition",
          "$ref": "#/definitions/Element"
        },
        "comment": {
          "description": "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).",
          "$ref": "#/definitions/markdown"
        },
        "_comment": {
          "description": "Extensions for comment",
          "$ref": "#/definitions/Element"
        },
        "requirements": {
          "description": "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.",
          "$ref": "#/definitions/markdown"
        },
        "_requirements": {
          "description": "Extensions for requirements",
          "$ref": "#/definitions/Element"
        },
        "alias": {
          "description": "Identifies additional names by which this element might also be known.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_alias": {
          "description": "Extensions for alias",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "min": {
          "description": "The minimum number of times this element SHALL appear in the instance.",
          "$ref": "#/definitions/unsignedInt"
        },
        "_min": {
          "description": "Extensions for min",
          "$ref": "#/definitions/Element"
        },
        "max": {
          "description": "The maximum number of times this element is permitted to appear in the instance.",
          "$ref": "#/definitions/string"
        },
        "_max": {
          "description": "Extensions for max",
          "$ref": "#/definitions/Element"
        },
        "base": {
          "description": "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.",
          "$ref": "#/definitions/ElementDefinition_Base"
        },
        "contentReference": {
          "description": "Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.",
          "$ref": "#/definitions/uri"
        },
        "_contentReference": {
          "description": "Extensions for contentReference",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The data type or resource that the value of this element is permitted to be.",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Type"
          },
          "type": "array"
        },
        "defaultValueBase64Binary": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/\u003d]){4}\\s*)+$",
          "type": "string"
        },
        "_defaultValueBase64Binary": {
          "description": "Extensions for defaultValueBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "defaultValueBoolean": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_defaultValueBoolean": {
          "description": "Extensions for defaultValueBoolean",
          "$ref": "#/definitions/Element"
        },
        "defaultValueCanonical": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_defaultValueCanonical": {
          "description": "Extensions for defaultValueCanonical",
          "$ref": "#/definitions/Element"
        },
        "defaultValueCode": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_defaultValueCode": {
          "description": "Extensions for defaultValueCode",
          "$ref": "#/definitions/Element"
        },
        "defaultValueDate": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_defaultValueDate": {
          "description": "Extensions for defaultValueDate",
          "$ref": "#/definitions/Element"
        },
        "defaultValueDateTime": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_defaultValueDateTime": {
          "description": "Extensions for defaultValueDateTime",
          "$ref": "#/definitions/Element"
        },
        "defaultValueDecimal": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_defaultValueDecimal": {
          "description": "Extensions for defaultValueDecimal",
          "$ref": "#/definitions/Element"
        },
        "defaultValueId": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_defaultValueId": {
          "description": "Extensions for defaultValueId",
          "$ref": "#/definitions/Element"
        },
        "defaultValueInstant": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_defaultValueInstant": {
          "description": "Extensions for defaultValueInstant",
          "$ref": "#/definitions/Element"
        },
        "defaultValueInteger": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_defaultValueInteger": {
          "description": "Extensions for defaultValueInteger",
          "$ref": "#/definitions/Element"
        },
        "defaultValueMarkdown": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_defaultValueMarkdown": {
          "description": "Extensions for defaultValueMarkdown",
          "$ref": "#/definitions/Element"
        },
        "defaultValueOid": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_defaultValueOid": {
          "description": "Extensions for defaultValueOid",
          "$ref": "#/definitions/Element"
        },
        "defaultValuePositiveInt": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_defaultValuePositiveInt": {
          "description": "Extensions for defaultValuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "defaultValueString": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_defaultValueString": {
          "description": "Extensions for defaultValueString",
          "$ref": "#/definitions/Element"
        },
        "defaultValueTime": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_defaultValueTime": {
          "description": "Extensions for defaultValueTime",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUnsignedInt": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_defaultValueUnsignedInt": {
          "description": "Extensions for defaultValueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUri": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_defaultValueUri": {
          "description": "Extensions for defaultValueUri",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUrl": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_defaultValueUrl": {
          "description": "Extensions for defaultValueUrl",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUuid": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_defaultValueUuid": {
          "description": "Extensions for defaultValueUuid",
          "$ref": "#/definitions/Element"
        },
        "defaultValueAddress": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Address"
        },
        "defaultValueAge": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Age"
        },
        "defaultValueAnnotation": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Annotation"
        },
        "defaultValueAttachment": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Attachment"
        },
        "defaultValueCodeableConcept": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/CodeableConcept"
        },
        "defaultValueCoding": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Coding"
        },
        "defaultValueContactPoint": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/ContactPoint"
        },
        "defaultValueCount": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Count"
        },
        "defaultValueDistance": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Distance"
        },
        "defaultValueDuration": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Duration"
        },
        "defaultValueHumanName": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/HumanName"
        },
        "defaultValueIdentifier": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Identifier"
        },
        "defaultValueMoney": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Money"
        },
        "defaultValuePeriod": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Period"
        },
        "defaultValueQuantity": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Quantity"
        },
        "defaultValueRange": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Range"
        },
        "defaultValueRatio": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Ratio"
        },
        "defaultValueReference": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Reference"
        },
        "defaultValueSampledData": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/SampledData"
        },
        "defaultValueSignature": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Signature"
        },
        "defaultValueTiming": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Timing"
        },
        "defaultValueContactDetail": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/ContactDetail"
        },
        "defaultValueContributor": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Contributor"
        },
        "defaultValueDataRequirement": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/DataRequirement"
        },
        "defaultValueExpression": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Expression"
        },
        "defaultValueParameterDefinition": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "defaultValueRelatedArtifact": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "defaultValueTriggerDefinition": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "defaultValueUsageContext": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/UsageContext"
        },
        "defaultValueDosage": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Dosage"
        },
        "defaultValueMeta": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
          "$ref": "#/definitions/Meta"
        },
        "meaningWhenMissing": {
          "description": "The Implicit meaning that is to be understood when this element is missing (e.g. \u0027when this element is missing, the period is ongoing\u0027).",
          "$ref": "#/definitions/markdown"
        },
        "_meaningWhenMissing": {
          "description": "Extensions for meaningWhenMissing",
          "$ref": "#/definitions/Element"
        },
        "orderMeaning": {
          "description": "If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.",
          "$ref": "#/definitions/string"
        },
        "_orderMeaning": {
          "description": "Extensions for orderMeaning",
          "$ref": "#/definitions/Element"
        },
        "fixedBase64Binary": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/\u003d]){4}\\s*)+$",
          "type": "string"
        },
        "_fixedBase64Binary": {
          "description": "Extensions for fixedBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "fixedBoolean": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_fixedBoolean": {
          "description": "Extensions for fixedBoolean",
          "$ref": "#/definitions/Element"
        },
        "fixedCanonical": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_fixedCanonical": {
          "description": "Extensions for fixedCanonical",
          "$ref": "#/definitions/Element"
        },
        "fixedCode": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_fixedCode": {
          "description": "Extensions for fixedCode",
          "$ref": "#/definitions/Element"
        },
        "fixedDate": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_fixedDate": {
          "description": "Extensions for fixedDate",
          "$ref": "#/definitions/Element"
        },
        "fixedDateTime": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_fixedDateTime": {
          "description": "Extensions for fixedDateTime",
          "$ref": "#/definitions/Element"
        },
        "fixedDecimal": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_fixedDecimal": {
          "description": "Extensions for fixedDecimal",
          "$ref": "#/definitions/Element"
        },
        "fixedId": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_fixedId": {
          "description": "Extensions for fixedId",
          "$ref": "#/definitions/Element"
        },
        "fixedInstant": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_fixedInstant": {
          "description": "Extensions for fixedInstant",
          "$ref": "#/definitions/Element"
        },
        "fixedInteger": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_fixedInteger": {
          "description": "Extensions for fixedInteger",
          "$ref": "#/definitions/Element"
        },
        "fixedMarkdown": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_fixedMarkdown": {
          "description": "Extensions for fixedMarkdown",
          "$ref": "#/definitions/Element"
        },
        "fixedOid": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_fixedOid": {
          "description": "Extensions for fixedOid",
          "$ref": "#/definitions/Element"
        },
        "fixedPositiveInt": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_fixedPositiveInt": {
          "description": "Extensions for fixedPositiveInt",
          "$ref": "#/definitions/Element"
        },
        "fixedString": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_fixedString": {
          "description": "Extensions for fixedString",
          "$ref": "#/definitions/Element"
        },
        "fixedTime": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_fixedTime": {
          "description": "Extensions for fixedTime",
          "$ref": "#/definitions/Element"
        },
        "fixedUnsignedInt": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_fixedUnsignedInt": {
          "description": "Extensions for fixedUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "fixedUri": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_fixedUri": {
          "description": "Extensions for fixedUri",
          "$ref": "#/definitions/Element"
        },
        "fixedUrl": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_fixedUrl": {
          "description": "Extensions for fixedUrl",
          "$ref": "#/definitions/Element"
        },
        "fixedUuid": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_fixedUuid": {
          "description": "Extensions for fixedUuid",
          "$ref": "#/definitions/Element"
        },
        "fixedAddress": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Address"
        },
        "fixedAge": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Age"
        },
        "fixedAnnotation": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Annotation"
        },
        "fixedAttachment": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Attachment"
        },
        "fixedCodeableConcept": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "fixedCoding": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Coding"
        },
        "fixedContactPoint": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/ContactPoint"
        },
        "fixedCount": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Count"
        },
        "fixedDistance": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Distance"
        },
        "fixedDuration": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Duration"
        },
        "fixedHumanName": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/HumanName"
        },
        "fixedIdentifier": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Identifier"
        },
        "fixedMoney": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Money"
        },
        "fixedPeriod": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Period"
        },
        "fixedQuantity": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Quantity"
        },
        "fixedRange": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Range"
        },
        "fixedRatio": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Ratio"
        },
        "fixedReference": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Reference"
        },
        "fixedSampledData": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/SampledData"
        },
        "fixedSignature": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Signature"
        },
        "fixedTiming": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Timing"
        },
        "fixedContactDetail": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/ContactDetail"
        },
        "fixedContributor": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Contributor"
        },
        "fixedDataRequirement": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/DataRequirement"
        },
        "fixedExpression": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Expression"
        },
        "fixedParameterDefinition": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "fixedRelatedArtifact": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "fixedTriggerDefinition": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "fixedUsageContext": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/UsageContext"
        },
        "fixedDosage": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Dosage"
        },
        "fixedMeta": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Meta"
        },
        "patternBase64Binary": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/\u003d]){4}\\s*)+$",
          "type": "string"
        },
        "_patternBase64Binary": {
          "description": "Extensions for patternBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "patternBoolean": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_patternBoolean": {
          "description": "Extensions for patternBoolean",
          "$ref": "#/definitions/Element"
        },
        "patternCanonical": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_patternCanonical": {
          "description": "Extensions for patternCanonical",
          "$ref": "#/definitions/Element"
        },
        "patternCode": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_patternCode": {
          "description": "Extensions for patternCode",
          "$ref": "#/definitions/Element"
        },
        "patternDate": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_patternDate": {
          "description": "Extensions for patternDate",
          "$ref": "#/definitions/Element"
        },
        "patternDateTime": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_patternDateTime": {
          "description": "Extensions for patternDateTime",
          "$ref": "#/definitions/Element"
        },
        "patternDecimal": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_patternDecimal": {
          "description": "Extensions for patternDecimal",
          "$ref": "#/definitions/Element"
        },
        "patternId": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_patternId": {
          "description": "Extensions for patternId",
          "$ref": "#/definitions/Element"
        },
        "patternInstant": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_patternInstant": {
          "description": "Extensions for patternInstant",
          "$ref": "#/definitions/Element"
        },
        "patternInteger": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_patternInteger": {
          "description": "Extensions for patternInteger",
          "$ref": "#/definitions/Element"
        },
        "patternMarkdown": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_patternMarkdown": {
          "description": "Extensions for patternMarkdown",
          "$ref": "#/definitions/Element"
        },
        "patternOid": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_patternOid": {
          "description": "Extensions for patternOid",
          "$ref": "#/definitions/Element"
        },
        "patternPositiveInt": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_patternPositiveInt": {
          "description": "Extensions for patternPositiveInt",
          "$ref": "#/definitions/Element"
        },
        "patternString": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_patternString": {
          "description": "Extensions for patternString",
          "$ref": "#/definitions/Element"
        },
        "patternTime": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_patternTime": {
          "description": "Extensions for patternTime",
          "$ref": "#/definitions/Element"
        },
        "patternUnsignedInt": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_patternUnsignedInt": {
          "description": "Extensions for patternUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "patternUri": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_patternUri": {
          "description": "Extensions for patternUri",
          "$ref": "#/definitions/Element"
        },
        "patternUrl": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_patternUrl": {
          "description": "Extensions for patternUrl",
          "$ref": "#/definitions/Element"
        },
        "patternUuid": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_patternUuid": {
          "description": "Extensions for patternUuid",
          "$ref": "#/definitions/Element"
        },
        "patternAddress": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Address"
        },
        "patternAge": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Age"
        },
        "patternAnnotation": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Annotation"
        },
        "patternAttachment": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Attachment"
        },
        "patternCodeableConcept": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "patternCoding": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Coding"
        },
        "patternContactPoint": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/ContactPoint"
        },
        "patternCount": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Count"
        },
        "patternDistance": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Distance"
        },
        "patternDuration": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Duration"
        },
        "patternHumanName": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/HumanName"
        },
        "patternIdentifier": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Identifier"
        },
        "patternMoney": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Money"
        },
        "patternPeriod": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Period"
        },
        "patternQuantity": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Quantity"
        },
        "patternRange": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Range"
        },
        "patternRatio": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Ratio"
        },
        "patternReference": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Reference"
        },
        "patternSampledData": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/SampledData"
        },
        "patternSignature": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Signature"
        },
        "patternTiming": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Timing"
        },
        "patternContactDetail": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/ContactDetail"
        },
        "patternContributor": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Contributor"
        },
        "patternDataRequirement": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/DataRequirement"
        },
        "patternExpression": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Expression"
        },
        "patternParameterDefinition": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "patternRelatedArtifact": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "patternTriggerDefinition": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "patternUsageContext": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/UsageContext"
        },
        "patternDosage": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Dosage"
        },
        "patternMeta": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Meta"
        },
        "example": {
          "description": "A sample value for this element demonstrating the type of information that would typically be found in the element.",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Example"
          },
          "type": "array"
        },
        "minValueDate": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_minValueDate": {
          "description": "Extensions for minValueDate",
          "$ref": "#/definitions/Element"
        },
        "minValueDateTime": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_minValueDateTime": {
          "description": "Extensions for minValueDateTime",
          "$ref": "#/definitions/Element"
        },
        "minValueInstant": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_minValueInstant": {
          "description": "Extensions for minValueInstant",
          "$ref": "#/definitions/Element"
        },
        "minValueTime": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_minValueTime": {
          "description": "Extensions for minValueTime",
          "$ref": "#/definitions/Element"
        },
        "minValueDecimal": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_minValueDecimal": {
          "description": "Extensions for minValueDecimal",
          "$ref": "#/definitions/Element"
        },
        "minValueInteger": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_minValueInteger": {
          "description": "Extensions for minValueInteger",
          "$ref": "#/definitions/Element"
        },
        "minValuePositiveInt": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_minValuePositiveInt": {
          "description": "Extensions for minValuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "minValueUnsignedInt": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_minValueUnsignedInt": {
          "description": "Extensions for minValueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "minValueQuantity": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "$ref": "#/definitions/Quantity"
        },
        "maxValueDate": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_maxValueDate": {
          "description": "Extensions for maxValueDate",
          "$ref": "#/definitions/Element"
        },
        "maxValueDateTime": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_maxValueDateTime": {
          "description": "Extensions for maxValueDateTime",
          "$ref": "#/definitions/Element"
        },
        "maxValueInstant": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_maxValueInstant": {
          "description": "Extensions for maxValueInstant",
          "$ref": "#/definitions/Element"
        },
        "maxValueTime": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_maxValueTime": {
          "description": "Extensions for maxValueTime",
          "$ref": "#/definitions/Element"
        },
        "maxValueDecimal": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_maxValueDecimal": {
          "description": "Extensions for maxValueDecimal",
          "$ref": "#/definitions/Element"
        },
        "maxValueInteger": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_maxValueInteger": {
          "description": "Extensions for maxValueInteger",
          "$ref": "#/definitions/Element"
        },
        "maxValuePositiveInt": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_maxValuePositiveInt": {
          "description": "Extensions for maxValuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "maxValueUnsignedInt": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_maxValueUnsignedInt": {
          "description": "Extensions for maxValueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "maxValueQuantity": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "$ref": "#/definitions/Quantity"
        },
        "maxLength": {
          "description": "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.",
          "$ref": "#/definitions/integer"
        },
        "_maxLength": {
          "description": "Extensions for maxLength",
          "$ref": "#/definitions/Element"
        },
        "condition": {
          "description": "A reference to an invariant that may make additional statements about the cardinality or value in the instance.",
          "items": {
            "$ref": "#/definitions/id"
          },
          "type": "array"
        },
        "_condition": {
          "description": "Extensions for condition",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "constraint": {
          "description": "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Constraint"
          },
          "type": "array"
        },
        "mustSupport": {
          "description": "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.",
          "$ref": "#/definitions/boolean"
        },
        "_mustSupport": {
          "description": "Extensions for mustSupport",
          "$ref": "#/definitions/Element"
        },
        "isModifier": {
          "description": "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.",
          "$ref": "#/definitions/boolean"
        },
        "_isModifier": {
          "description": "Extensions for isModifier",
          "$ref": "#/definitions/Element"
        },
        "isModifierReason": {
          "description": "Explains how that element affects the interpretation of the resource or element that contains it.",
          "$ref": "#/definitions/string"
        },
        "_isModifierReason": {
          "description": "Extensions for isModifierReason",
          "$ref": "#/definitions/Element"
        },
        "isSummary": {
          "description": "Whether the element should be included if a client requests a search with the parameter _summary\u003dtrue.",
          "$ref": "#/definitions/boolean"
        },
        "_isSummary": {
          "description": "Extensions for isSummary",
          "$ref": "#/definitions/Element"
        },
        "binding": {
          "description": "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).",
          "$ref": "#/definitions/ElementDefinition_Binding"
        },
        "mapping": {
          "description": "Identifies a concept from an external specification that roughly corresponds to this element.",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Mapping"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Slicing": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "discriminator": {
          "description": "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Discriminator"
          },
          "type": "array"
        },
        "description": {
          "description": "A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "ordered": {
          "description": "If the matching elements have to occur in the same order as defined in the profile.",
          "$ref": "#/definitions/boolean"
        },
        "_ordered": {
          "description": "Extensions for ordered",
          "$ref": "#/definitions/Element"
        },
        "rules": {
          "description": "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.",
          "enum": [
            "closed",
            "open",
            "openAtEnd"
          ]
        },
        "_rules": {
          "description": "Extensions for rules",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Discriminator": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "How the element value is interpreted when discrimination is evaluated.",
          "enum": [
            "value",
            "exists",
            "pattern",
            "type",
            "profile"
          ]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "path": {
          "description": "A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Base": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "min": {
          "description": "Minimum cardinality of the base element identified by the path.",
          "$ref": "#/definitions/unsignedInt"
        },
        "_min": {
          "description": "Extensions for min",
          "$ref": "#/definitions/Element"
        },
        "max": {
          "description": "Maximum cardinality of the base element identified by the path.",
          "$ref": "#/definitions/string"
        },
        "_max": {
          "description": "Extensions for max",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Type": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.",
          "$ref": "#/definitions/uri"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.",
          "items": {
            "$ref": "#/definitions/canonical"
          },
          "type": "array"
        },
        "targetProfile": {
          "description": "Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.",
          "items": {
            "$ref": "#/definitions/canonical"
          },
          "type": "array"
        },
        "aggregation": {
          "description": "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.",
          "items": {
            "enum": [
              "contained",
              "referenced",
              "bundled"
            ]
          },
          "type": "array"
        },
        "_aggregation": {
          "description": "Extensions for aggregation",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "versioning": {
          "description": "Whether this reference needs to be version specific or version independent, or whether either can be used.",
          "enum": [
            "either",
            "independent",
            "specific"
          ]
        },
        "_versioning": {
          "description": "Extensions for versioning",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Example": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "label": {
          "description": "Describes the purpose of this example amoung the set of examples.",
          "$ref": "#/definitions/string"
        },
        "_label": {
          "description": "Extensions for label",
          "$ref": "#/definitions/Element"
        },
        "valueBase64Binary": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/\u003d]){4}\\s*)+$",
          "type": "string"
        },
        "_valueBase64Binary": {
          "description": "Extensions for valueBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "valueBoolean": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "#/definitions/Element"
        },
        "valueCanonical": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueCanonical": {
          "description": "Extensions for valueCanonical",
          "$ref": "#/definitions/Element"
        },
        "valueCode": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_valueCode": {
          "description": "Extensions for valueCode",
          "$ref": "#/definitions/Element"
        },
        "valueDate": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_valueDate": {
          "description": "Extensions for valueDate",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valueDecimal": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_valueDecimal": {
          "description": "Extensions for valueDecimal",
          "$ref": "#/definitions/Element"
        },
        "valueId": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_valueId": {
          "description": "Extensions for valueId",
          "$ref": "#/definitions/Element"
        },
        "valueInstant": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_valueInstant": {
          "description": "Extensions for valueInstant",
          "$ref": "#/definitions/Element"
        },
        "valueInteger": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueMarkdown": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueMarkdown": {
          "description": "Extensions for valueMarkdown",
          "$ref": "#/definitions/Element"
        },
        "valueOid": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_valueOid": {
          "description": "Extensions for valueOid",
          "$ref": "#/definitions/Element"
        },
        "valuePositiveInt": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_valuePositiveInt": {
          "description": "Extensions for valuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "valueString": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueTime": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_valueTime": {
          "description": "Extensions for valueTime",
          "$ref": "#/definitions/Element"
        },
        "valueUnsignedInt": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_valueUnsignedInt": {
          "description": "Extensions for valueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "valueUri": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUri": {
          "description": "Extensions for valueUri",
          "$ref": "#/definitions/Element"
        },
        "valueUrl": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUrl": {
          "description": "Extensions for valueUrl",
          "$ref": "#/definitions/Element"
        },
        "valueUuid": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_valueUuid": {
          "description": "Extensions for valueUuid",
          "$ref": "#/definitions/Element"
        },
        "valueAddress": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Address"
        },
        "valueAge": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Age"
        },
        "valueAnnotation": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Annotation"
        },
        "valueAttachment": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Attachment"
        },
        "valueCodeableConcept": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "valueCoding": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Coding"
        },
        "valueContactPoint": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/ContactPoint"
        },
        "valueCount": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Count"
        },
        "valueDistance": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Distance"
        },
        "valueDuration": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Duration"
        },
        "valueHumanName": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/HumanName"
        },
        "valueIdentifier": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Identifier"
        },
        "valueMoney": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Money"
        },
        "valuePeriod": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Period"
        },
        "valueQuantity": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Quantity"
        },
        "valueRange": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Range"
        },
        "valueRatio": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Ratio"
        },
        "valueReference": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Reference"
        },
        "valueSampledData": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/SampledData"
        },
        "valueSignature": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Signature"
        },
        "valueTiming": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Timing"
        },
        "valueContactDetail": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/ContactDetail"
        },
        "valueContributor": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Contributor"
        },
        "valueDataRequirement": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/DataRequirement"
        },
        "valueExpression": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Expression"
        },
        "valueParameterDefinition": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "valueRelatedArtifact": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "valueTriggerDefinition": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "valueUsageContext": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/UsageContext"
        },
        "valueDosage": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Dosage"
        },
        "valueMeta": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Meta"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Constraint": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "key": {
          "description": "Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.",
          "$ref": "#/definitions/id"
        },
        "_key": {
          "description": "Extensions for key",
          "$ref": "#/definitions/Element"
        },
        "requirements": {
          "description": "Description of why this constraint is necessary or appropriate.",
          "$ref": "#/definitions/string"
        },
        "_requirements": {
          "description": "Extensions for requirements",
          "$ref": "#/definitions/Element"
        },
        "severity": {
          "description": "Identifies the impact constraint violation has on the conformance of the instance.",
          "enum": [
            "error",
            "warning"
          ]
        },
        "_severity": {
          "description": "Extensions for severity",
          "$ref": "#/definitions/Element"
        },
        "human": {
          "description": "Text that can be used to describe the constraint in messages identifying that the constraint has been violated.",
          "$ref": "#/definitions/string"
        },
        "_human": {
          "description": "Extensions for human",
          "$ref": "#/definitions/Element"
        },
        "expression": {
          "description": "A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.",
          "$ref": "#/definitions/string"
        },
        "_expression": {
          "description": "Extensions for expression",
          "$ref": "#/definitions/Element"
        },
        "xpath": {
          "description": "An XPath expression of constraint that can be executed to see if this constraint is met.",
          "$ref": "#/definitions/string"
        },
        "_xpath": {
          "description": "Extensions for xpath",
          "$ref": "#/definitions/Element"
        },
        "source": {
          "description": "A reference to the original source of the constraint, for traceability purposes.",
          "$ref": "#/definitions/canonical"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Binding": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "strength": {
          "description": "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
          "enum": [
            "required",
            "extensible",
            "preferred",
            "example"
          ]
        },
        "_strength": {
          "description": "Extensions for strength",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "Describes the intended use of this particular set of codes.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "valueSet": {
          "description": "Refers to the value set that identifies the set of codes the binding refers to.",
          "$ref": "#/definitions/canonical"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Mapping": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identity": {
          "description": "An internal reference to the definition of a mapping.",
          "$ref": "#/definitions/id"
        },
        "_identity": {
          "description": "Extensions for identity",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "Identifies the computable language in which mapping.map is expressed.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "map": {
          "description": "Expresses what part of the target specification corresponds to this element.",
          "$ref": "#/definitions/string"
        },
        "_map": {
          "description": "Extensions for map",
          "$ref": "#/definitions/Element"
        },
        "comment": {
          "description": "Comments that provide information about the mapping or its use.",
          "$ref": "#/definitions/string"
        },
        "_comment": {
          "description": "Extensions for comment",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Basic": {
      "description": "Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don\u0027t map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.",
      "properties": {
        "resourceType": {
          "description": "This is a Basic resource",
          "const": "Basic"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "Identifier assigned to the resource for business purposes, outside the context of FHIR.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "code": {
          "description": "Identifies the \u0027type\u0027 of resource - equivalent to the resource name for other resources.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "subject": {
          "description": "Identifies the patient, practitioner, device or any other resource that is the \"focus\" of this resource.",
          "$ref": "#/definitions/Reference"
        },
        "created": {
          "description": "Identifies when the resource was first created.",
          "$ref": "#/definitions/date"
        },
        "_created": {
          "description": "Extensions for created",
          "$ref": "#/definitions/Element"
        },
        "author": {
          "description": "Indicates who was responsible for creating the resource instance.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false,
      "required": [
        "code",
        "resourceType"
      ]
    },
    "Binary": {
      "description": "A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.",
      "properties": {
        "resourceType": {
          "description": "This is a Binary resource",
          "const": "Binary"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "contentType": {
          "description": "MimeType of the binary content represented as a standard MimeType (BCP 13).",
          "$ref": "#/definitions/code"
        },
        "_contentType": {
          "description": "Extensions for contentType",
          "$ref": "#/definitions/Element"
        },
        "securityContext": {
          "description": "This element identifies another resource that can be used as a proxy of the security sensitivity to use when deciding and enforcing access control rules for the Binary resource. Given that the Binary resource contains very few elements that can be used to determine the sensitivity of the data and relationships to individuals, the referenced resource stands in as a proxy equivalent for this purpose. This referenced resource may be related to the Binary (e.g. Media, DocumentReference), or may be some non-related Resource purely as a security proxy. E.g. to identify that the binary resource relates to a patient, and access should only be granted to applications that have access to the patient.",
          "$ref": "#/definitions/Reference"
        },
        "data": {
          "description": "The actual content, base64 encoded.",
          "$ref": "#/definitions/base64Binary"
        },
        "_data": {
          "description": "Extensions for data",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "BodyStructure": {
      "description": "Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.",
      "properties": {
        "resourceType": {
          "description": "This is a BodyStructure resource",
          "const": "BodyStructure"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "Identifier for this instance of the anatomical structure.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "active": {
          "description": "Whether this body site is in active use.",
          "$ref": "#/definitions/boolean"
        },
        "_active": {
          "description": "Extensions for active",
          "$ref": "#/definitions/Element"
        },
        "morphology": {
          "description": "The kind of structure being represented by the body structure at `BodyStructure.location`.  This can define both normal and abnormal morphologies.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "location": {
          "description": "The anatomical location or region of the specimen, lesion, or body structure.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "locationQualifier": {
          "description": "Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "description": {
          "description": "A summary, characterization or explanation of the body structure.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "image": {
          "description": "Image or images used to identify a location.",
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "type": "array"
        },
        "patient": {
          "description": "The person to which the body site belongs.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false,
      "required": [
        "patient",
        "resourceType"
      ]
    },
    "Bundle": {
      "description": "A container for a collection of resources.",
      "properties": {
        "resourceType": {
          "description": "This is a Bundle resource",
          "const": "Bundle"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "identifier": {
          "description": "A persistent identifier for the bundle that won\u0027t change as a bundle is copied from server to server.",
          "$ref": "#/definitions/Identifier"
        },
        "type": {
          "description": "Indicates the purpose of this bundle - how it is intended to be used.",
          "enum": [
            "document",
            "message",
            "transaction",
            "transaction-response",
            "batch",
            "batch-response",
            "history",
            "searchset",
            "collection"
          ]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "timestamp": {
          "description": "The date/time that the bundle was assembled - i.e. when the resources were placed in the bundle.",
          "$ref": "#/definitions/instant"
        },
        "_timestamp": {
          "description": "Extensions for timestamp",
          "$ref": "#/definitions/Element"
        },
        "total": {
          "description": "If a set of search matches, this is the total number of entries of type \u0027match\u0027 across all pages in the search.  It does not include search.mode \u003d \u0027include\u0027 or \u0027outcome\u0027 entries and it does not provide a count of the number of entries in the Bundle.",
          "$ref": "#/definitions/unsignedInt"
        },
        "_total": {
          "description": "Extensions for total",
          "$ref": "#/definitions/Element"
        },
        "link": {
          "description": "A series of links that provide context to this bundle.",
          "items": {
            "$ref": "#/definitions/Bundle_Link"
          },
          "type": "array"
        },
        "entry": {
          "description": "An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).",
          "items": {
            "$ref": "#/definitions/Bundle_Entry"
          },
          "type": "array"
        },
        "signature": {
          "description": "Digital Signature - base64 encoded. XML-DSig or a JWT.",
          "$ref": "#/definitions/Signature"
        }
      },
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "Bundle_Link": {
      "description": "A container for a collection of resources.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "relation": {
          "description": "A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).",
          "$ref": "#/definitions/string"
        },
        "_relation": {
          "description": "Extensions for relation",
          "$ref": "#/definitions/Element"
        },
        "url": {
          "description": "The reference details for the link.",
          "$ref": "#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Bundle_Entry": {
      "description": "A container for a collection of resources.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "link": {
          "description": "A series of links that provide context to this entry.",
          "items": {
            "$ref": "#/definitions/Bundle_Link"
          },
          "type": "array"
        },
        "fullUrl": {
          "description": "The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be version-independent URL consistent with the Resource.id. The fullUrl is a version independent reference to the resource. The fullUrl element SHALL have a value except that: \n* fullUrl can be empty on a POST (although it does not need to when specifying a temporary id for reference in the bundle)\n* Results from operations might involve resources that are not identified.",
          "$ref": "#/definitions/uri"
        },
        "_fullUrl": {
          "description": "Extensions for fullUrl",
          "$ref": "#/definitions/Element"
        },
        "resource": {
          "description": "The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type.",
          "$ref": "#/definitions/ResourceList"
        },
        "search": {
          "description": "Information about the search process that lead to the creation of this entry.",
          "$ref": "#/definitions/Bundle_Search"
        },
        "request": {
          "description": "Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.",
          "$ref": "#/definitions/Bundle_Request"
        },
        "response": {
          "description": "Indicates the results of processing the corresponding \u0027request\u0027 entry in the batch or transaction being responded to or what the results of an operation where when returning history.",
          "$ref": "#/definitions/Bundle_Response"
        }
      },
      "additionalProperties": false
    },
    "Bundle_Search": {
      "description": "A container for a collection of resources.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "mode": {
          "description": "Why this entry is in the result set - whether it\u0027s included as a match or because of an _include requirement, or to convey information or warning information about the search process.",
          "enum": [
            "match",
            "include",
            "outcome"
          ]
        },
        "_mode": {
          "description": "Extensions for mode",
          "$ref": "#/definitions/Element"
        },
        "score": {
          "description": "When searching, the server\u0027s search ranking score for the entry.",
          "$ref": "#/definitions/decimal"
        },
        "_score": {
          "description": "Extensions for score",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Bundle_Request": {
      "description": "A container for a collection of resources.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "method": {
          "description": "In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred.",
          "enum": [
            "GET",
            "HEAD",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ]
        },
        "_method": {
          "description": "Extensions for method",
          "$ref": "#/definitions/Element"
        },
        "url": {
          "description": "The URL for this entry, relative to the root (the address to which the request is posted).",
          "$ref": "#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "ifNoneMatch": {
          "description": "If the ETag values match, return a 304 Not Modified status. See the API documentation for [\"Conditional Read\"](http.html#cread).",
          "$ref": "#/definitions/string"
        },
        "_ifNoneMatch": {
          "description": "Extensions for ifNoneMatch",
          "$ref": "#/definitions/Element"
        },
        "ifModifiedSince": {
          "description": "Only perform the operation if the last updated date matches. See the API documentation for [\"Conditional Read\"](http.html#cread).",
          "$ref": "#/definitions/instant"
        },
        "_ifModifiedSince": {
          "description": "Extensions for ifModifiedSince",
          "$ref": "#/definitions/Element"
        },
        "ifMatch": {
          "description": "Only perform the operation if the Etag value matches. For more information, see the API section [\"Managing Resource Contention\"](http.html#concurrency).",
          "$ref": "#/definitions/string"
        },
        "_ifMatch": {
          "description": "Extensions for ifMatch",
          "$ref": "#/definitions/Element"
        },
        "ifNoneExist": {
          "description": "Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for [\"Conditional Create\"](http.html#ccreate). This is just the query portion of the URL - what follows the \"?\" (not including the \"?\").",
          "$ref": "#/definitions/string"
        },
        "_ifNoneExist": {
          "description": "Extensions for ifNoneExist",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Bundle_Response": {
      "description": "A container for a collection of resources.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "status": {
          "description": "The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.",
          "$ref": "#/definitions/string"
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "location": {
          "description": "The location header created by processing this operation, populated if the operation returns a location.",
          "$ref": "#/definitions/uri"
        },
        "_location": {
          "description": "Extensions for location",
          "$ref": "#/definitions/Element"
        },
        "etag": {
          "description": "The Etag for the resource, if the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)).",
          "$ref": "#/definitions/string"
        },
        "_etag": {
          "description": "Extensions for etag",
          "$ref": "#/definitions/Element"
        },
        "lastModified": {
          "description": "The date/time that the resource was modified on the server.",
          "$ref": "#/definitions/instant"
        },
        "_lastModified": {
          "description": "Extensions for lastModified",
          "$ref": "#/definitions/Element"
        },
        "outcome": {
          "description": "An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction.",
          "$ref": "#/definitions/ResourceList"
        }
      },
      "additionalProperties": false
    },
    "CodeSystem": {
      "description": "The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.",
      "properties": {
        "resourceType": {
          "description": "This is a CodeSystem resource",
          "const": "CodeSystem"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "url": {
          "description": "An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this code system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the code system is stored on different servers. This is used in [Coding](datatypes.html#Coding).system.",
          "$ref": "#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "identifier": {
          "description": "A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "version": {
          "description": "The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "title": {
          "description": "A short, descriptive, user-friendly title for the code system.",
          "$ref": "#/definitions/string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "status": {
          "description": "The date (and optionally time) when the code system resource was created or revised.",
          "enum": [
            "draft",
            "active",
            "retired",
            "unknown"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "experimental": {
          "description": "A Boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
          "$ref": "#/definitions/boolean"
        },
        "_experimental": {
          "description": "Extensions for experimental",
          "$ref": "#/definitions/Element"
        },
        "date": {
          "description": "The date  (and optionally time) when the code system was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.",
          "$ref": "#/definitions/dateTime"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "publisher": {
          "description": "The name of the organization or individual that published the code system.",
          "$ref": "#/definitions/string"
        },
        "_publisher": {
          "description": "Extensions for publisher",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the publisher.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "description": {
          "description": "A free text natural language description of the code system from a consumer\u0027s perspective.",
          "$ref": "#/definitions/markdown"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "useContext": {
          "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate code system instances.",
          "items": {
            "$ref": "#/definitions/UsageContext"
          },
          "type": "array"
        },
        "jurisdiction": {
          "description": "A legal or geographic region in which the code system is intended to be used.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "purpose": {
          "description": "Explanation of why this code system is needed and why it has been designed as it has.",
          "$ref": "#/definitions/markdown"
        },
        "_purpose": {
          "description": "Extensions for purpose",
          "$ref": "#/definitions/Element"
        },
        "copyright": {
          "description": "A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.",
          "$ref": "#/definitions/markdown"
        },
        "_copyright": {
          "description": "Extensions for copyright",
          "$ref": "#/definitions/Element"
        },
        "caseSensitive": {
          "description": "If code comparison is case sensitive when codes within this system are compared to each other.",
          "$ref": "#/definitions/boolean"
        },
        "_caseSensitive": {
          "description": "Extensions for caseSensitive",
          "$ref": "#/definitions/Element"
        },
        "valueSet": {
          "description": "Canonical reference to the value set that contains the entire code system.",
          "$ref": "#/definitions/canonical"
        },
        "hierarchyMeaning": {
          "description": "The meaning of the hierarchy of concepts as represented in this resource.",
          "enum": [
            "grouped-by",
            "is-a",
            "part-of",
            "classified-with"
          ]
        },
        "_hierarchyMeaning": {
          "description": "Extensions for hierarchyMeaning",
          "$ref": "#/definitions/Element"
        },
        "compositional": {
          "description": "The code system defines a compositional (post-coordination) grammar.",
          "$ref": "#/definitions/boolean"
        },
        "_compositional": {
          "description": "Extensions for compositional",
          "$ref": "#/definitions/Element"
        },
        "versionNeeded": {
          "description": "This flag is used to signify that the code system does not commit to concept permanence across versions. If true, a version must be specified when referencing this code system.",
          "$ref": "#/definitions/boolean"
        },
        "_versionNeeded": {
          "description": "Extensions for versionNeeded",
          "$ref": "#/definitions/Element"
        },
        "content": {
          "description": "The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.",
          "enum": [
            "not-present",
            "example",
            "fragment",
            "complete",
            "supplement"
          ]
        },
        "_content": {
          "description": "Extensions for content",
          "$ref": "#/definitions/Element"
        },
        "supplements": {
          "description": "The canonical URL of the code system that this code system supplement is adding designations and properties to.",
          "$ref": "#/definitions/canonical"
        },
        "count": {
          "description": "The total number of concepts defined by the code system. Where the code system has a compositional grammar, the basis of this count is defined by the system steward.",
          "$ref": "#/definitions/unsignedInt"
        },
        "_count": {
          "description": "Extensions for count",
          "$ref": "#/definitions/Element"
        },
        "filter": {
          "description": "A filter that can be used in a value set compose statement when selecting concepts using a filter.",
          "items": {
            "$ref": "#/definitions/CodeSystem_Filter"
          },
          "type": "array"
        },
        "property": {
          "description": "A property defines an additional slot through which additional information can be provided about a concept.",
          "items": {
            "$ref": "#/definitions/CodeSystem_Property"
          },
          "type": "array"
        },
        "concept": {
          "description": "Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.",
          "items": {
            "$ref": "#/definitions/CodeSystem_Concept"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "CodeSystem_Filter": {
      "description": "The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "The code that identifies this filter when it is used as a filter in [[[ValueSet]]].compose.include.filter.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "A description of how or why the filter is used.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "operator": {
          "description": "A list of operators that can be used with the filter.",
          "items": {
            "$ref": "#/definitions/code"
          },
          "type": "array"
        },
        "_operator": {
          "description": "Extensions for operator",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "value": {
          "description": "A description of what the value for the filter should be.",
          "$ref": "#/definitions/string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "CodeSystem_Property": {
      "description": "The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "uri": {
          "description": "Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.",
          "$ref": "#/definitions/uri"
        },
        "_uri": {
          "description": "Extensions for uri",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "A description of the property- why it is defined, and how its value might be used.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The type of the property value. Properties of type \"code\" contain a code defined by the code system (e.g. a reference to another defined concept).",
          "enum": [
            "code",
            "Coding",
            "string",
            "integer",
            "boolean",
            "dateTime",
            "decimal"
          ]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "CodeSystem_Concept": {
      "description": "The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "A code - a text symbol - that uniquely identifies the concept within the code system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "display": {
          "description": "A human readable string that is the recommended default way to present this concept to a user.",
          "$ref": "#/definitions/string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        },
        "definition": {
          "description": "The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.",
          "$ref": "#/definitions/string"
        },
        "_definition": {
          "description": "Extensions for definition",
          "$ref": "#/definitions/Element"
        },
        "designation": {
          "description": "Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.",
          "items": {
            "$ref": "#/definitions/CodeSystem_Designation"
          },
          "type": "array"
        },
        "property": {
          "description": "A property value for this concept.",
          "items": {
            "$ref": "#/definitions/CodeSystem_Property1"
          },
          "type": "array"
        },
        "concept": {
          "description": "Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.",
          "items": {
            "$ref": "#/definitions/CodeSystem_Concept"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "CodeSystem_Designation": {
      "description": "The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "language": {
          "description": "The language this designation is defined for.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "use": {
          "description": "A code that details how this designation would be used.",
          "$ref": "#/definitions/Coding"
        },
        "value": {
          "description": "The text value for this designation.",
          "$ref": "#/definitions/string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "CodeSystem_Property1": {
      "description": "The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "A code that is a reference to CodeSystem.property.code.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "valueCode": {
          "description": "The value of this property.",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_valueCode": {
          "description": "Extensions for valueCode",
          "$ref": "#/definitions/Element"
        },
        "valueCoding": {
          "description": "The value of this property.",
          "$ref": "#/definitions/Coding"
        },
        "valueString": {
          "description": "The value of this property.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueInteger": {
          "description": "The value of this property.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueBoolean": {
          "description": "The value of this property.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "The value of this property.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valueDecimal": {
          "description": "The value of this property.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_valueDecimal": {
          "description": "Extensions for valueDecimal",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "DocumentManifest": {
      "description": "A collection of documents compiled for a purpose together with metadata that applies to the collection.",
      "properties": {
        "resourceType": {
          "description": "This is a DocumentManifest resource",
          "const": "DocumentManifest"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "masterIdentifier": {
          "description": "A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.",
          "$ref": "#/definitions/Identifier"
        },
        "identifier": {
          "description": "Other identifiers associated with the document manifest, including version independent  identifiers.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "status": {
          "description": "The status of this document manifest.",
          "enum": [
            "current",
            "superseded",
            "entered-in-error"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The code specifying the type of clinical activity that resulted in placing the associated content into the DocumentManifest.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "subject": {
          "description": "Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).",
          "$ref": "#/definitions/Reference"
        },
        "created": {
          "description": "When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).",
          "$ref": "#/definitions/dateTime"
        },
        "_created": {
          "description": "Extensions for created",
          "$ref": "#/definitions/Element"
        },
        "author": {
          "description": "Identifies who is the author of the manifest. Manifest author is not necessarly the author of the references included.",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "type": "array"
        },
        "recipient": {
          "description": "A patient, practitioner, or organization for which this set of documents is intended.",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "type": "array"
        },
        "source": {
          "description": "Identifies the source system, application, or software that produced the document manifest.",
          "$ref": "#/definitions/uri"
        },
        "_source": {
          "description": "Extensions for source",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "Human-readable description of the source document. This is sometimes known as the \"title\".",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "content": {
          "description": "The list of Resources that consist of the parts of this manifest.",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "type": "array"
        },
        "related": {
          "description": "Related identifiers or resources associated with the DocumentManifest.",
          "items": {
            "$ref": "#/definitions/DocumentManifest_Related"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "content",
        "resourceType"
      ]
    },
    "DocumentManifest_Related": {
      "description": "A collection of documents compiled for a purpose together with metadata that applies to the collection.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers.",
          "$ref": "#/definitions/Identifier"
        },
        "ref": {
          "description": "Related Resource to this DocumentManifest. For example, Order, ServiceRequest,  Procedure, EligibilityRequest, etc.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false
    },
    "DocumentReference": {
      "description": "A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.",
      "properties": {
        "resourceType": {
          "description": "This is a DocumentReference resource",
          "const": "DocumentReference"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "masterIdentifier": {
          "description": "Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.",
          "$ref": "#/definitions/Identifier"
        },
        "identifier": {
          "description": "Other identifiers associated with the document, including version independent identifiers.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "status": {
          "description": "The status of this document reference.",
          "enum": [
            "current",
            "superseded",
            "entered-in-error"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "docStatus": {
          "description": "The status of the underlying document.",
          "$ref": "#/definitions/code"
        },
        "_docStatus": {
          "description": "Extensions for docStatus",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "category": {
          "description": "A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "subject": {
          "description": "Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).",
          "$ref": "#/definitions/Reference"
        },
        "date": {
          "description": "When the document reference was created.",
          "$ref": "#/definitions/instant"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "author": {
          "description": "Identifies who is responsible for adding the information to the document.",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "type": "array"
        },
        "authenticator": {
          "description": "Which person or organization authenticates that this document is valid.",
          "$ref": "#/definitions/Reference"
        },
        "custodian": {
          "description": "Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.",
          "$ref": "#/definitions/Reference"
        },
        "relatesTo": {
          "description": "Relationships that this document has with other document references that already exist.",
          "items": {
            "$ref": "#/definitions/DocumentReference_RelatesTo"
          },
          "type": "array"
        },
        "description": {
          "description": "Human-readable description of the source document.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "securityLabel": {
          "description": "A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the \"reference\" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "content": {
          "description": "The document and format referenced. There may be multiple content element repetitions, each with a different format.",
          "items": {
            "$ref": "#/definitions/DocumentReference_Content"
          },
          "type": "array"
        },
        "context": {
          "description": "The clinical context in which the document was prepared.",
          "$ref": "#/definitions/DocumentReference_Context"
        }
      },
      "additionalProperties": false,
      "required": [
        "content",
        "resourceType"
      ]
    },
    "DocumentReference_RelatesTo": {
      "description": "A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "The type of relationship that this document has with anther document.",
          "enum": [
            "replaces",
            "transforms",
            "signs",
            "appends"
          ]
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "target": {
          "description": "The target document of this relationship.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false,
      "required": [
        "target"
      ]
    },
    "DocumentReference_Content": {
      "description": "A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "attachment": {
          "description": "The document or URL of the document along with critical metadata to prove content has integrity.",
          "$ref": "#/definitions/Attachment"
        },
        "format": {
          "description": "An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.",
          "$ref": "#/definitions/Coding"
        }
      },
      "additionalProperties": false,
      "required": [
        "attachment"
      ]
    },
    "DocumentReference_Context": {
      "description": "A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "encounter": {
          "description": "Describes the clinical encounter or type of care that the document content is associated with.",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "type": "array"
        },
        "event": {
          "description": "This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the type Code, such as a \"History and Physical Report\" in which the procedure being documented is necessarily a \"History and Physical\" act.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "period": {
          "description": "The time period over which the service that is described by the document was provided.",
          "$ref": "#/definitions/Period"
        },
        "facilityType": {
          "description": "The kind of facility where the patient was seen.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "practiceSetting": {
          "description": "This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "sourcePatientInfo": {
          "description": "The Patient Information as known when the document was published. May be a reference to a version specific, or contained.",
          "$ref": "#/definitions/Reference"
        },
        "related": {
          "description": "Related identifiers or resources associated with the DocumentReference.",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "EventDefinition": {
      "description": "The EventDefinition resource provides a reusable description of when a particular event can occur.",
      "properties": {
        "resourceType": {
          "description": "This is a EventDefinition resource",
          "const": "EventDefinition"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "url": {
          "description": "An absolute URI that is used to identify this event definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this event definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the event definition is stored on different servers.",
          "$ref": "#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "identifier": {
          "description": "A formal identifier that is used to identify this event definition when it is represented in other formats, or referenced in a specification, model, design or an instance.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "version": {
          "description": "The identifier that is used to identify this version of the event definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the event definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A natural language name identifying the event definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "title": {
          "description": "A short, descriptive, user-friendly title for the event definition.",
          "$ref": "#/definitions/string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "subtitle": {
          "description": "An explanatory or alternate title for the event definition giving additional information about its content.",
          "$ref": "#/definitions/string"
        },
        "_subtitle": {
          "description": "Extensions for subtitle",
          "$ref": "#/definitions/Element"
        },
        "status": {
          "description": "The status of this event definition. Enables tracking the life-cycle of the content.",
          "enum": [
            "draft",
            "active",
            "retired",
            "unknown"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "experimental": {
          "description": "A Boolean value to indicate that this event definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
          "$ref": "#/definitions/boolean"
        },
        "_experimental": {
          "description": "Extensions for experimental",
          "$ref": "#/definitions/Element"
        },
        "subjectCodeableConcept": {
          "description": "A code or group definition that describes the intended subject of the event definition.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "subjectReference": {
          "description": "A code or group definition that describes the intended subject of the event definition.",
          "$ref": "#/definitions/Reference"
        },
        "date": {
          "description": "The date  (and optionally time) when the event definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the event definition changes.",
          "$ref": "#/definitions/dateTime"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "publisher": {
          "description": "The name of the organization or individual that published the event definition.",
          "$ref": "#/definitions/string"
        },
        "_publisher": {
          "description": "Extensions for publisher",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the publisher.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "description": {
          "description": "A free text natural language description of the event definition from a consumer\u0027s perspective.",
          "$ref": "#/definitions/markdown"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "useContext": {
          "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate event definition instances.",
          "items": {
            "$ref": "#/definitions/UsageContext"
          },
          "type": "array"
        },
        "jurisdiction": {
          "description": "A legal or geographic region in which the event definition is intended to be used.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "purpose": {
          "description": "Explanation of why this event definition is needed and why it has been designed as it has.",
          "$ref": "#/definitions/markdown"
        },
        "_purpose": {
          "description": "Extensions for purpose",
          "$ref": "#/definitions/Element"
        },
        "usage": {
          "description": "A detailed description of how the event definition is used from a clinical perspective.",
          "$ref": "#/definitions/string"
        },
        "_usage": {
          "description": "Extensions for usage",
          "$ref": "#/definitions/Element"
        },
        "copyright": {
          "description": "A copyright statement relating to the event definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the event definition.",
          "$ref": "#/definitions/markdown"
        },
        "_copyright": {
          "description": "Extensions for copyright",
          "$ref": "#/definitions/Element"
        },
        "approvalDate": {
          "description": "The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.",
          "$ref": "#/definitions/date"
        },
        "_approvalDate": {
          "description": "Extensions for approvalDate",
          "$ref": "#/definitions/Element"
        },
        "lastReviewDate": {
          "description": "The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.",
          "$ref": "#/definitions/date"
        },
        "_lastReviewDate": {
          "description": "Extensions for lastReviewDate",
          "$ref": "#/definitions/Element"
        },
        "effectivePeriod": {
          "description": "The period during which the event definition content was or is planned to be in active use.",
          "$ref": "#/definitions/Period"
        },
        "topic": {
          "description": "Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "author": {
          "description": "An individiual or organization primarily involved in the creation and maintenance of the content.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "editor": {
          "description": "An individual or organization primarily responsible for internal coherence of the content.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "reviewer": {
          "description": "An individual or organization primarily responsible for review of some aspect of the content.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "endorser": {
          "description": "An individual or organization responsible for officially endorsing the content for use in some setting.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "relatedArtifact": {
          "description": "Related resources such as additional documentation, justification, or bibliographic references.",
          "items": {
            "$ref": "#/definitions/RelatedArtifact"
          },
          "type": "array"
        },
        "trigger": {
          "description": "The trigger element defines when the event occurs. If more than one trigger condition is specified, the event fires whenever any one of the trigger conditions is met.",
          "items": {
            "$ref": "#/definitions/TriggerDefinition"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "trigger",
        "resourceType"
      ]
    },
    "Flag": {
      "description": "Prospective warnings of potential issues when providing care to the patient.",
      "properties": {
        "resourceType": {
          "description": "This is a Flag resource",
          "const": "Flag"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "Business identifiers assigned to this flag by the performer or other systems which remain constant as the resource is updated and propagates from server to server.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "status": {
          "description": "Supports basic workflow.",
          "enum": [
            "active",
            "inactive",
            "entered-in-error"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "category": {
          "description": "Allows a flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "code": {
          "description": "The coded value or textual component of the flag to display to the user.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "subject": {
          "description": "The patient, location, group, organization, or practitioner etc. this is about record this flag is associated with.",
          "$ref": "#/definitions/Reference"
        },
        "period": {
          "description": "The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.",
          "$ref": "#/definitions/Period"
        },
        "encounter": {
          "description": "This alert is only relevant during the encounter.",
          "$ref": "#/definitions/Reference"
        },
        "author": {
          "description": "The person, organization or device that created the flag.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false,
      "required": [
        "code",
        "subject",
        "resourceType"
      ]
    },
    "GraphDefinition": {
      "description": "A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.",
      "properties": {
        "resourceType": {
          "description": "This is a GraphDefinition resource",
          "const": "GraphDefinition"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "url": {
          "description": "An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this graph definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the graph definition is stored on different servers.",
          "$ref": "#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "version": {
          "description": "The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "status": {
          "description": "The status of this graph definition. Enables tracking the life-cycle of the content.",
          "enum": [
            "draft",
            "active",
            "retired",
            "unknown"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "experimental": {
          "description": "A Boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
          "$ref": "#/definitions/boolean"
        },
        "_experimental": {
          "description": "Extensions for experimental",
          "$ref": "#/definitions/Element"
        },
        "date": {
          "description": "The date  (and optionally time) when the graph definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes.",
          "$ref": "#/definitions/dateTime"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "publisher": {
          "description": "The name of the organization or individual that published the graph definition.",
          "$ref": "#/definitions/string"
        },
        "_publisher": {
          "description": "Extensions for publisher",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the publisher.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "description": {
          "description": "A free text natural language description of the graph definition from a consumer\u0027s perspective.",
          "$ref": "#/definitions/markdown"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "useContext": {
          "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate graph definition instances.",
          "items": {
            "$ref": "#/definitions/UsageContext"
          },
          "type": "array"
        },
        "jurisdiction": {
          "description": "A legal or geographic region in which the graph definition is intended to be used.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "purpose": {
          "description": "Explanation of why this graph definition is needed and why it has been designed as it has.",
          "$ref": "#/definitions/markdown"
        },
        "_purpose": {
          "description": "Extensions for purpose",
          "$ref": "#/definitions/Element"
        },
        "start": {
          "description": "The type of FHIR resource at which instances of this graph start.",
          "$ref": "#/definitions/code"
        },
        "_start": {
          "description": "Extensions for start",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "The profile that describes the use of the base resource.",
          "$ref": "#/definitions/canonical"
        },
        "link": {
          "description": "Links this graph makes rules about.",
          "items": {
            "$ref": "#/definitions/GraphDefinition_Link"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "GraphDefinition_Link": {
      "description": "A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "A FHIR expression that identifies one of FHIR References to other resources.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "sliceName": {
          "description": "Which slice (if profiled).",
          "$ref": "#/definitions/string"
        },
        "_sliceName": {
          "description": "Extensions for sliceName",
          "$ref": "#/definitions/Element"
        },
        "min": {
          "description": "Minimum occurrences for this link.",
          "$ref": "#/definitions/integer"
        },
        "_min": {
          "description": "Extensions for min",
          "$ref": "#/definitions/Element"
        },
        "max": {
          "description": "Maximum occurrences for this link.",
          "$ref": "#/definitions/string"
        },
        "_max": {
          "description": "Extensions for max",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "Information about why this link is of interest in this graph definition.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "target": {
          "description": "Potential target for the link.",
          "items": {
            "$ref": "#/definitions/GraphDefinition_Target"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "GraphDefinition_Target": {
      "description": "A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "Type of resource this link refers to.",
          "$ref": "#/definitions/code"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "params": {
          "description": "A set of parameters to look up.",
          "$ref": "#/definitions/string"
        },
        "_params": {
          "description": "Extensions for params",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "Profile for the target resource.",
          "$ref": "#/definitions/canonical"
        },
        "compartment": {
          "description": "Compartment Consistency Rules.",
          "items": {
            "$ref": "#/definitions/GraphDefinition_Compartment"
          },
          "type": "array"
        },
        "link": {
          "description": "Additional links from target resource.",
          "items": {
            "$ref": "#/definitions/GraphDefinition_Link"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "GraphDefinition_Compartment": {
      "description": "A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "use": {
          "description": "Defines how the compartment rule is used - whether it it is used to test whether resources are subject to the rule, or whether it is a rule that must be followed.",
          "enum": [
            "condition",
            "requirement"
          ]
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "Identifies the compartment.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "rule": {
          "description": "identical | matching | different | no-rule | custom.",
          "enum": [
            "identical",
            "matching",
            "different",
            "custom"
          ]
        },
        "_rule": {
          "description": "Extensions for rule",
          "$ref": "#/definitions/Element"
        },
        "expression": {
          "description": "Custom rule, as a FHIRPath expression.",
          "$ref": "#/definitions/string"
        },
        "_expression": {
          "description": "Extensions for expression",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "Documentation for FHIRPath expression.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ImplementationGuide": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "resourceType": {
          "description": "This is a ImplementationGuide resource",
          "const": "ImplementationGuide"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "url": {
          "description": "An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this implementation guide is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the implementation guide is stored on different servers.",
          "$ref": "#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "version": {
          "description": "The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "title": {
          "description": "A short, descriptive, user-friendly title for the implementation guide.",
          "$ref": "#/definitions/string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "status": {
          "description": "The status of this implementation guide. Enables tracking the life-cycle of the content.",
          "enum": [
            "draft",
            "active",
            "retired",
            "unknown"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "experimental": {
          "description": "A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
          "$ref": "#/definitions/boolean"
        },
        "_experimental": {
          "description": "Extensions for experimental",
          "$ref": "#/definitions/Element"
        },
        "date": {
          "description": "The date  (and optionally time) when the implementation guide was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.",
          "$ref": "#/definitions/dateTime"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "publisher": {
          "description": "The name of the organization or individual that published the implementation guide.",
          "$ref": "#/definitions/string"
        },
        "_publisher": {
          "description": "Extensions for publisher",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the publisher.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "description": {
          "description": "A free text natural language description of the implementation guide from a consumer\u0027s perspective.",
          "$ref": "#/definitions/markdown"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "useContext": {
          "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances.",
          "items": {
            "$ref": "#/definitions/UsageContext"
          },
          "type": "array"
        },
        "jurisdiction": {
          "description": "A legal or geographic region in which the implementation guide is intended to be used.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "copyright": {
          "description": "A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.",
          "$ref": "#/definitions/markdown"
        },
        "_copyright": {
          "description": "Extensions for copyright",
          "$ref": "#/definitions/Element"
        },
        "packageId": {
          "description": "The NPM package name for this Implementation Guide, used in the NPM package distribution, which is the primary mechanism by which FHIR based tooling manages IG dependencies. This value must be globally unique, and should be assigned with care.",
          "$ref": "#/definitions/id"
        },
        "_packageId": {
          "description": "Extensions for packageId",
          "$ref": "#/definitions/Element"
        },
        "license": {
          "description": "The license that applies to this Implementation Guide, using an SPDX license code, or \u0027not-open-source\u0027.",
          "enum": [
            "not-open-source",
            "0BSD",
            "AAL",
            "Abstyles",
            "Adobe-2006",
            "Adobe-Glyph",
            "ADSL",
            "AFL-1.1",
            "AFL-1.2",
            "AFL-2.0",
            "AFL-2.1",
            "AFL-3.0",
            "Afmparse",
            "AGPL-1.0-only",
            "AGPL-1.0-or-later",
            "AGPL-3.0-only",
            "AGPL-3.0-or-later",
            "Aladdin",
            "AMDPLPA",
            "AML",
            "AMPAS",
            "ANTLR-PD",
            "Apache-1.0",
            "Apache-1.1",
            "Apache-2.0",
            "APAFML",
            "APL-1.0",
            "APSL-1.0",
            "APSL-1.1",
            "APSL-1.2",
            "APSL-2.0",
            "Artistic-1.0-cl8",
            "Artistic-1.0-Perl",
            "Artistic-1.0",
            "Artistic-2.0",
            "Bahyph",
            "Barr",
            "Beerware",
            "BitTorrent-1.0",
            "BitTorrent-1.1",
            "Borceux",
            "BSD-1-Clause",
            "BSD-2-Clause-FreeBSD",
            "BSD-2-Clause-NetBSD",
            "BSD-2-Clause-Patent",
            "BSD-2-Clause",
            "BSD-3-Clause-Attribution",
            "BSD-3-Clause-Clear",
            "BSD-3-Clause-LBNL",
            "BSD-3-Clause-No-Nuclear-License-2014",
            "BSD-3-Clause-No-Nuclear-License",
            "BSD-3-Clause-No-Nuclear-Warranty",
            "BSD-3-Clause",
            "BSD-4-Clause-UC",
            "BSD-4-Clause",
            "BSD-Protection",
            "BSD-Source-Code",
            "BSL-1.0",
            "bzip2-1.0.5",
            "bzip2-1.0.6",
            "Caldera",
            "CATOSL-1.1",
            "CC-BY-1.0",
            "CC-BY-2.0",
            "CC-BY-2.5",
            "CC-BY-3.0",
            "CC-BY-4.0",
            "CC-BY-NC-1.0",
            "CC-BY-NC-2.0",
            "CC-BY-NC-2.5",
            "CC-BY-NC-3.0",
            "CC-BY-NC-4.0",
            "CC-BY-NC-ND-1.0",
            "CC-BY-NC-ND-2.0",
            "CC-BY-NC-ND-2.5",
            "CC-BY-NC-ND-3.0",
            "CC-BY-NC-ND-4.0",
            "CC-BY-NC-SA-1.0",
            "CC-BY-NC-SA-2.0",
            "CC-BY-NC-SA-2.5",
            "CC-BY-NC-SA-3.0",
            "CC-BY-NC-SA-4.0",
            "CC-BY-ND-1.0",
            "CC-BY-ND-2.0",
            "CC-BY-ND-2.5",
            "CC-BY-ND-3.0",
            "CC-BY-ND-4.0",
            "CC-BY-SA-1.0",
            "CC-BY-SA-2.0",
            "CC-BY-SA-2.5",
            "CC-BY-SA-3.0",
            "CC-BY-SA-4.0",
            "CC0-1.0",
            "CDDL-1.0",
            "CDDL-1.1",
            "CDLA-Permissive-1.0",
            "CDLA-Sharing-1.0",
            "CECILL-1.0",
            "CECILL-1.1",
            "CECILL-2.0",
            "CECILL-2.1",
            "CECILL-B",
            "CECILL-C",
            "ClArtistic",
            "CNRI-Jython",
            "CNRI-Python-GPL-Compatible",
            "CNRI-Python",
            "Condor-1.1",
            "CPAL-1.0",
            "CPL-1.0",
            "CPOL-1.02",
            "Crossword",
            "CrystalStacker",
            "CUA-OPL-1.0",
            "Cube",
            "curl",
            "D-FSL-1.0",
            "diffmark",
            "DOC",
            "Dotseqn",
            "DSDP",
            "dvipdfm",
            "ECL-1.0",
            "ECL-2.0",
            "EFL-1.0",
            "EFL-2.0",
            "eGenix",
            "Entessa",
            "EPL-1.0",
            "EPL-2.0",
            "ErlPL-1.1",
            "EUDatagrid",
            "EUPL-1.0",
            "EUPL-1.1",
            "EUPL-1.2",
            "Eurosym",
            "Fair",
            "Frameworx-1.0",
            "FreeImage",
            "FSFAP",
            "FSFUL",
            "FSFULLR",
            "FTL",
            "GFDL-1.1-only",
            "GFDL-1.1-or-later",
            "GFDL-1.2-only",
            "GFDL-1.2-or-later",
            "GFDL-1.3-only",
            "GFDL-1.3-or-later",
            "Giftware",
            "GL2PS",
            "Glide",
            "Glulxe",
            "gnuplot",
            "GPL-1.0-only",
            "GPL-1.0-or-later",
            "GPL-2.0-only",
            "GPL-2.0-or-later",
            "GPL-3.0-only",
            "GPL-3.0-or-later",
            "gSOAP-1.3b",
            "HaskellReport",
            "HPND",
            "IBM-pibs",
            "ICU",
            "IJG",
            "ImageMagick",
            "iMatix",
            "Imlib2",
            "Info-ZIP",
            "Intel-ACPI",
            "Intel",
            "Interbase-1.0",
            "IPA",
            "IPL-1.0",
            "ISC",
            "JasPer-2.0",
            "JSON",
            "LAL-1.2",
            "LAL-1.3",
            "Latex2e",
            "Leptonica",
            "LGPL-2.0-only",
            "LGPL-2.0-or-later",
            "LGPL-2.1-only",
            "LGPL-2.1-or-later",
            "LGPL-3.0-only",
            "LGPL-3.0-or-later",
            "LGPLLR",
            "Libpng",
            "libtiff",
            "LiLiQ-P-1.1",
            "LiLiQ-R-1.1",
            "LiLiQ-Rplus-1.1",
            "Linux-OpenIB",
            "LPL-1.0",
            "LPL-1.02",
            "LPPL-1.0",
            "LPPL-1.1",
            "LPPL-1.2",
            "LPPL-1.3a",
            "LPPL-1.3c",
            "MakeIndex",
            "MirOS",
            "MIT-0",
            "MIT-advertising",
            "MIT-CMU",
            "MIT-enna",
            "MIT-feh",
            "MIT",
            "MITNFA",
            "Motosoto",
            "mpich2",
            "MPL-1.0",
            "MPL-1.1",
            "MPL-2.0-no-copyleft-exception",
            "MPL-2.0",
            "MS-PL",
            "MS-RL",
            "MTLL",
            "Multics",
            "Mup",
            "NASA-1.3",
            "Naumen",
            "NBPL-1.0",
            "NCSA",
            "Net-SNMP",
            "NetCDF",
            "Newsletr",
            "NGPL",
            "NLOD-1.0",
            "NLPL",
            "Nokia",
            "NOSL",
            "Noweb",
            "NPL-1.0",
            "NPL-1.1",
            "NPOSL-3.0",
            "NRL",
            "NTP",
            "OCCT-PL",
            "OCLC-2.0",
            "ODbL-1.0",
            "OFL-1.0",
            "OFL-1.1",
            "OGTSL",
            "OLDAP-1.1",
            "OLDAP-1.2",
            "OLDAP-1.3",
            "OLDAP-1.4",
            "OLDAP-2.0.1",
            "OLDAP-2.0",
            "OLDAP-2.1",
            "OLDAP-2.2.1",
            "OLDAP-2.2.2",
            "OLDAP-2.2",
            "OLDAP-2.3",
            "OLDAP-2.4",
            "OLDAP-2.5",
            "OLDAP-2.6",
            "OLDAP-2.7",
            "OLDAP-2.8",
            "OML",
            "OpenSSL",
            "OPL-1.0",
            "OSET-PL-2.1",
            "OSL-1.0",
            "OSL-1.1",
            "OSL-2.0",
            "OSL-2.1",
            "OSL-3.0",
            "PDDL-1.0",
            "PHP-3.0",
            "PHP-3.01",
            "Plexus",
            "PostgreSQL",
            "psfrag",
            "psutils",
            "Python-2.0",
            "Qhull",
            "QPL-1.0",
            "Rdisc",
            "RHeCos-1.1",
            "RPL-1.1",
            "RPL-1.5",
            "RPSL-1.0",
            "RSA-MD",
            "RSCPL",
            "Ruby",
            "SAX-PD",
            "Saxpath",
            "SCEA",
            "Sendmail",
            "SGI-B-1.0",
            "SGI-B-1.1",
            "SGI-B-2.0",
            "SimPL-2.0",
            "SISSL-1.2",
            "SISSL",
            "Sleepycat",
            "SMLNJ",
            "SMPPL",
            "SNIA",
            "Spencer-86",
            "Spencer-94",
            "Spencer-99",
            "SPL-1.0",
            "SugarCRM-1.1.3",
            "SWL",
            "TCL",
            "TCP-wrappers",
            "TMate",
            "TORQUE-1.1",
            "TOSL",
            "Unicode-DFS-2015",
            "Unicode-DFS-2016",
            "Unicode-TOU",
            "Unlicense",
            "UPL-1.0",
            "Vim",
            "VOSTROM",
            "VSL-1.0",
            "W3C-19980720",
            "W3C-20150513",
            "W3C",
            "Watcom-1.0",
            "Wsuipa",
            "WTFPL",
            "X11",
            "Xerox",
            "XFree86-1.1",
            "xinetd",
            "Xnet",
            "xpp",
            "XSkat",
            "YPL-1.0",
            "YPL-1.1",
            "Zed",
            "Zend-2.0",
            "Zimbra-1.3",
            "Zimbra-1.4",
            "zlib-acknowledgement",
            "Zlib",
            "ZPL-1.1",
            "ZPL-2.0",
            "ZPL-2.1"
          ]
        },
        "_license": {
          "description": "Extensions for license",
          "$ref": "#/definitions/Element"
        },
        "fhirVersion": {
          "description": "The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. describes how to use. The value of this element is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.0.1. for this version.",
          "items": {
            "enum": [
              "0.01",
              "0.05",
              "0.06",
              "0.11",
              "0.0.80",
              "0.0.81",
              "0.0.82",
              "0.4.0",
              "0.5.0",
              "1.0.0",
              "1.0.1",
              "1.0.2",
              "1.1.0",
              "1.4.0",
              "1.6.0",
              "1.8.0",
              "3.0.0",
              "3.0.1",
              "3.3.0",
              "3.5.0",
              "4.0.0",
              "4.0.1"
            ]
          },
          "type": "array"
        },
        "_fhirVersion": {
          "description": "Extensions for fhirVersion",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "dependsOn": {
          "description": "Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.",
          "items": {
            "$ref": "#/definitions/ImplementationGuide_DependsOn"
          },
          "type": "array"
        },
        "global": {
          "description": "A set of profiles that all resources covered by this implementation guide must conform to.",
          "items": {
            "$ref": "#/definitions/ImplementationGuide_Global"
          },
          "type": "array"
        },
        "definition": {
          "description": "The information needed by an IG publisher tool to publish the whole implementation guide.",
          "$ref": "#/definitions/ImplementationGuide_Definition"
        },
        "manifest": {
          "description": "Information about an assembled implementation guide, created by the publication tooling.",
          "$ref": "#/definitions/ImplementationGuide_Manifest"
        }
      },
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "ImplementationGuide_DependsOn": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "uri": {
          "description": "A canonical reference to the Implementation guide for the dependency.",
          "$ref": "#/definitions/canonical"
        },
        "packageId": {
          "description": "The NPM package name for the Implementation Guide that this IG depends on.",
          "$ref": "#/definitions/id"
        },
        "_packageId": {
          "description": "Extensions for packageId",
          "$ref": "#/definitions/Element"
        },
        "version": {
          "description": "The version of the IG that is depended on, when the correct version is required to understand the IG correctly.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "uri"
      ]
    },
    "ImplementationGuide_Global": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of resource that all instances must conform to.",
          "$ref": "#/definitions/code"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "A reference to the profile that all instances must conform to.",
          "$ref": "#/definitions/canonical"
        }
      },
      "additionalProperties": false,
      "required": [
        "profile"
      ]
    },
    "ImplementationGuide_Definition": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "grouping": {
          "description": "A logical group of resources. Logical groups can be used when building pages.",
          "items": {
            "$ref": "#/definitions/ImplementationGuide_Grouping"
          },
          "type": "array"
        },
        "resource": {
          "description": "A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.",
          "items": {
            "$ref": "#/definitions/ImplementationGuide_Resource"
          },
          "type": "array"
        },
        "page": {
          "description": "A page / section in the implementation guide. The root page is the implementation guide home page.",
          "$ref": "#/definitions/ImplementationGuide_Page"
        },
        "parameter": {
          "description": "Defines how IG is built by tools.",
          "items": {
            "$ref": "#/definitions/ImplementationGuide_Parameter"
          },
          "type": "array"
        },
        "template": {
          "description": "A template for building resources.",
          "items": {
            "$ref": "#/definitions/ImplementationGuide_Template"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "resource"
      ]
    },
    "ImplementationGuide_Grouping": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "The human-readable title to display for the package of resources when rendering the implementation guide.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "Human readable text describing the package.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ImplementationGuide_Resource": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "reference": {
          "description": "Where this resource is found.",
          "$ref": "#/definitions/Reference"
        },
        "fhirVersion": {
          "description": "Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.",
          "items": {
            "enum": [
              "0.01",
              "0.05",
              "0.06",
              "0.11",
              "0.0.80",
              "0.0.81",
              "0.0.82",
              "0.4.0",
              "0.5.0",
              "1.0.0",
              "1.0.1",
              "1.0.2",
              "1.1.0",
              "1.4.0",
              "1.6.0",
              "1.8.0",
              "3.0.0",
              "3.0.1",
              "3.3.0",
              "3.5.0",
              "4.0.0",
              "4.0.1"
            ]
          },
          "type": "array"
        },
        "_fhirVersion": {
          "description": "Extensions for fhirVersion",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "name": {
          "description": "A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "A description of the reason that a resource has been included in the implementation guide.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "exampleBoolean": {
          "description": "If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_exampleBoolean": {
          "description": "Extensions for exampleBoolean",
          "$ref": "#/definitions/Element"
        },
        "exampleCanonical": {
          "description": "If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_exampleCanonical": {
          "description": "Extensions for exampleCanonical",
          "$ref": "#/definitions/Element"
        },
        "groupingId": {
          "description": "Reference to the id of the grouping this resource appears in.",
          "$ref": "#/definitions/id"
        },
        "_groupingId": {
          "description": "Extensions for groupingId",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "reference"
      ]
    },
    "ImplementationGuide_Page": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "nameUrl": {
          "description": "The source address for the page.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_nameUrl": {
          "description": "Extensions for nameUrl",
          "$ref": "#/definitions/Element"
        },
        "nameReference": {
          "description": "The source address for the page.",
          "$ref": "#/definitions/Reference"
        },
        "title": {
          "description": "A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.",
          "$ref": "#/definitions/string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "generation": {
          "description": "A code that indicates how the page is generated.",
          "enum": [
            "html",
            "markdown",
            "xml",
            "generated"
          ]
        },
        "_generation": {
          "description": "Extensions for generation",
          "$ref": "#/definitions/Element"
        },
        "page": {
          "description": "Nested Pages/Sections under this page.",
          "items": {
            "$ref": "#/definitions/ImplementationGuide_Page"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "ImplementationGuide_Parameter": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "apply | path-resource | path-pages | path-tx-cache | expansion-parameter | rule-broken-links | generate-xml | generate-json | generate-turtle | html-template.",
          "enum": [
            "apply",
            "path-resource",
            "path-pages",
            "path-tx-cache",
            "expansion-parameter",
            "rule-broken-links",
            "generate-xml",
            "generate-json",
            "generate-turtle",
            "html-template"
          ]
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "value": {
          "description": "Value for named type.",
          "$ref": "#/definitions/string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ImplementationGuide_Template": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "Type of template specified.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "source": {
          "description": "The source location for the template.",
          "$ref": "#/definitions/string"
        },
        "_source": {
          "description": "Extensions for source",
          "$ref": "#/definitions/Element"
        },
        "scope": {
          "description": "The scope in which the template applies.",
          "$ref": "#/definitions/string"
        },
        "_scope": {
          "description": "Extensions for scope",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ImplementationGuide_Manifest": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "rendering": {
          "description": "A pointer to official web page, PDF or other rendering of the implementation guide.",
          "$ref": "#/definitions/url"
        },
        "_rendering": {
          "description": "Extensions for rendering",
          "$ref": "#/definitions/Element"
        },
        "resource": {
          "description": "A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.",
          "items": {
            "$ref": "#/definitions/ImplementationGuide_Resource1"
          },
          "type": "array"
        },
        "page": {
          "description": "Information about a page within the IG.",
          "items": {
            "$ref": "#/definitions/ImplementationGuide_Page1"
          },
          "type": "array"
        },
        "image": {
          "description": "Indicates a relative path to an image that exists within the IG.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_image": {
          "description": "Extensions for image",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "other": {
          "description": "Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_other": {
          "description": "Extensions for other",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "resource"
      ]
    },
    "ImplementationGuide_Resource1": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "reference": {
          "description": "Where this resource is found.",
          "$ref": "#/definitions/Reference"
        },
        "exampleBoolean": {
          "description": "If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_exampleBoolean": {
          "description": "Extensions for exampleBoolean",
          "$ref": "#/definitions/Element"
        },
        "exampleCanonical": {
          "description": "If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_exampleCanonical": {
          "description": "Extensions for exampleCanonical",
          "$ref": "#/definitions/Element"
        },
        "relativePath": {
          "description": "The relative path for primary page for this resource within the IG.",
          "$ref": "#/definitions/url"
        },
        "_relativePath": {
          "description": "Extensions for relativePath",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "reference"
      ]
    },
    "ImplementationGuide_Page1": {
      "description": "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "Relative path to the page.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "title": {
          "description": "Label for the page intended for human display.",
          "$ref": "#/definitions/string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "anchor": {
          "description": "The name of an anchor available on the page.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_anchor": {
          "description": "Extensions for anchor",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "List": {
      "description": "A list is a curated collection of resources.",
      "properties": {
        "resourceType": {
          "description": "This is a List resource",
          "const": "List"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "Identifier for the List assigned for business purposes outside the context of FHIR.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "status": {
          "description": "Indicates the current state of this list.",
          "enum": [
            "current",
            "retired",
            "entered-in-error"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "mode": {
          "description": "How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
          "enum": [
            "working",
            "snapshot",
            "changes"
          ]
        },
        "_mode": {
          "description": "Extensions for mode",
          "$ref": "#/definitions/Element"
        },
        "title": {
          "description": "A label for the list assigned by the author.",
          "$ref": "#/definitions/string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "This code defines the purpose of the list - why it was created.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "subject": {
          "description": "The common subject (or patient) of the resources that are in the list if there is one.",
          "$ref": "#/definitions/Reference"
        },
        "encounter": {
          "description": "The encounter that is the context in which this list was created.",
          "$ref": "#/definitions/Reference"
        },
        "date": {
          "description": "The date that the list was prepared.",
          "$ref": "#/definitions/dateTime"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "source": {
          "description": "The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.",
          "$ref": "#/definitions/Reference"
        },
        "orderedBy": {
          "description": "What order applies to the items in the list.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "note": {
          "description": "Comments that apply to the overall list.",
          "items": {
            "$ref": "#/definitions/Annotation"
          },
          "type": "array"
        },
        "entry": {
          "description": "Entries in this list.",
          "items": {
            "$ref": "#/definitions/List_Entry"
          },
          "type": "array"
        },
        "emptyReason": {
          "description": "If the list is empty, why the list is empty.",
          "$ref": "#/definitions/CodeableConcept"
        }
      },
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "List_Entry": {
      "description": "A list is a curated collection of resources.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "flag": {
          "description": "The flag allows the system constructing the list to indicate the role and significance of the item in the list.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "deleted": {
          "description": "True if this item is marked as deleted in the list.",
          "$ref": "#/definitions/boolean"
        },
        "_deleted": {
          "description": "Extensions for deleted",
          "$ref": "#/definitions/Element"
        },
        "date": {
          "description": "When this item was added to the list.",
          "$ref": "#/definitions/dateTime"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "item": {
          "description": "A reference to the actual resource from which data was derived.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false,
      "required": [
        "item"
      ]
    },
    "MessageHeader": {
      "description": "The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.",
      "properties": {
        "resourceType": {
          "description": "This is a MessageHeader resource",
          "const": "MessageHeader"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "eventCoding": {
          "description": "Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value \"http://terminology.hl7.org/CodeSystem/message-events\".  Alternatively uri to the EventDefinition.",
          "$ref": "#/definitions/Coding"
        },
        "eventUri": {
          "description": "Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value \"http://terminology.hl7.org/CodeSystem/message-events\".  Alternatively uri to the EventDefinition.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_eventUri": {
          "description": "Extensions for eventUri",
          "$ref": "#/definitions/Element"
        },
        "destination": {
          "description": "The destination application which the message is intended for.",
          "items": {
            "$ref": "#/definitions/MessageHeader_Destination"
          },
          "type": "array"
        },
        "sender": {
          "description": "Identifies the sending system to allow the use of a trust relationship.",
          "$ref": "#/definitions/Reference"
        },
        "enterer": {
          "description": "The person or device that performed the data entry leading to this message. When there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.",
          "$ref": "#/definitions/Reference"
        },
        "author": {
          "description": "The logical author of the message - the person or device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.",
          "$ref": "#/definitions/Reference"
        },
        "source": {
          "description": "The source application from which this message originated.",
          "$ref": "#/definitions/MessageHeader_Source"
        },
        "responsible": {
          "description": "The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.",
          "$ref": "#/definitions/Reference"
        },
        "reason": {
          "description": "Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "response": {
          "description": "Information about the message that this message is a response to.  Only present if this message is a response.",
          "$ref": "#/definitions/MessageHeader_Response"
        },
        "focus": {
          "description": "The actual data of the message - a reference to the root/focus class of the event.",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "type": "array"
        },
        "definition": {
          "description": "Permanent link to the MessageDefinition for this message.",
          "$ref": "#/definitions/canonical"
        }
      },
      "additionalProperties": false,
      "required": [
        "source",
        "resourceType"
      ]
    },
    "MessageHeader_Destination": {
      "description": "The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "Human-readable name for the target system.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "target": {
          "description": "Identifies the target end system in situations where the initial message transmission is to an intermediary system.",
          "$ref": "#/definitions/Reference"
        },
        "endpoint": {
          "description": "Indicates where the message should be routed to.",
          "$ref": "#/definitions/url"
        },
        "_endpoint": {
          "description": "Extensions for endpoint",
          "$ref": "#/definitions/Element"
        },
        "receiver": {
          "description": "Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn\u0027t sufficient.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false
    },
    "MessageHeader_Source": {
      "description": "The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "Human-readable name for the source system.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "software": {
          "description": "May include configuration or other information useful in debugging.",
          "$ref": "#/definitions/string"
        },
        "_software": {
          "description": "Extensions for software",
          "$ref": "#/definitions/Element"
        },
        "version": {
          "description": "Can convey versions of multiple systems in situations where a message passes through multiple hands.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "An e-mail, phone, website or other contact point to use to resolve issues with message communications.",
          "$ref": "#/definitions/ContactPoint"
        },
        "endpoint": {
          "description": "Identifies the routing target to send acknowledgements to.",
          "$ref": "#/definitions/url"
        },
        "_endpoint": {
          "description": "Extensions for endpoint",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "MessageHeader_Response": {
      "description": "The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "The MessageHeader.id of the message to which this message is a response.",
          "$ref": "#/definitions/id"
        },
        "_identifier": {
          "description": "Extensions for identifier",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.",
          "enum": [
            "ok",
            "transient-error",
            "fatal-error"
          ]
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "details": {
          "description": "Full details of any issues found in the message.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false
    },
    "NamingSystem": {
      "description": "A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding data types.",
      "properties": {
        "resourceType": {
          "description": "This is a NamingSystem resource",
          "const": "NamingSystem"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "status": {
          "description": "The status of this naming system. Enables tracking the life-cycle of the content.",
          "enum": [
            "draft",
            "active",
            "retired",
            "unknown"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "kind": {
          "description": "Indicates the purpose for the naming system - what kinds of things does it make unique?",
          "enum": [
            "codesystem",
            "identifier",
            "root"
          ]
        },
        "_kind": {
          "description": "Extensions for kind",
          "$ref": "#/definitions/Element"
        },
        "date": {
          "description": "The date  (and optionally time) when the naming system was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes.",
          "$ref": "#/definitions/dateTime"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "publisher": {
          "description": "The name of the organization or individual that published the naming system.",
          "$ref": "#/definitions/string"
        },
        "_publisher": {
          "description": "Extensions for publisher",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the publisher.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "responsible": {
          "description": "The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.",
          "$ref": "#/definitions/string"
        },
        "_responsible": {
          "description": "Extensions for responsible",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "Categorizes a naming system for easier search by grouping related naming systems.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "description": {
          "description": "A free text natural language description of the naming system from a consumer\u0027s perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.",
          "$ref": "#/definitions/markdown"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "useContext": {
          "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate naming system instances.",
          "items": {
            "$ref": "#/definitions/UsageContext"
          },
          "type": "array"
        },
        "jurisdiction": {
          "description": "A legal or geographic region in which the naming system is intended to be used.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "usage": {
          "description": "Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.",
          "$ref": "#/definitions/string"
        },
        "_usage": {
          "description": "Extensions for usage",
          "$ref": "#/definitions/Element"
        },
        "uniqueId": {
          "description": "Indicates how the system may be identified when referenced in electronic exchange.",
          "items": {
            "$ref": "#/definitions/NamingSystem_UniqueId"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "uniqueId",
        "resourceType"
      ]
    },
    "Parameters": {
      "description": "This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.",
      "properties": {
        "resourceType": {
          "description": "This is a Parameters resource",
          "const": "Parameters"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "parameter": {
          "description": "A parameter passed to or received from the operation.",
          "items": {
            "$ref": "#/definitions/Parameters_Parameter"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "Parameters_Parameter": {
      "description": "This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the parameter (reference to the operation definition).",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "valueBase64Binary": {
          "description": "If the parameter is a data type.",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/\u003d]){4}\\s*)+$",
          "type": "string"
        },
        "_valueBase64Binary": {
          "description": "Extensions for valueBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "valueBoolean": {
          "description": "If the parameter is a data type.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "#/definitions/Element"
        },
        "valueCanonical": {
          "description": "If the parameter is a data type.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueCanonical": {
          "description": "Extensions for valueCanonical",
          "$ref": "#/definitions/Element"
        },
        "valueCode": {
          "description": "If the parameter is a data type.",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_valueCode": {
          "description": "Extensions for valueCode",
          "$ref": "#/definitions/Element"
        },
        "valueDate": {
          "description": "If the parameter is a data type.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_valueDate": {
          "description": "Extensions for valueDate",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "If the parameter is a data type.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valueDecimal": {
          "description": "If the parameter is a data type.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_valueDecimal": {
          "description": "Extensions for valueDecimal",
          "$ref": "#/definitions/Element"
        },
        "valueId": {
          "description": "If the parameter is a data type.",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_valueId": {
          "description": "Extensions for valueId",
          "$ref": "#/definitions/Element"
        },
        "valueInstant": {
          "description": "If the parameter is a data type.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_valueInstant": {
          "description": "Extensions for valueInstant",
          "$ref": "#/definitions/Element"
        },
        "valueInteger": {
          "description": "If the parameter is a data type.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueMarkdown": {
          "description": "If the parameter is a data type.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueMarkdown": {
          "description": "Extensions for valueMarkdown",
          "$ref": "#/definitions/Element"
        },
        "valueOid": {
          "description": "If the parameter is a data type.",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_valueOid": {
          "description": "Extensions for valueOid",
          "$ref": "#/definitions/Element"
        },
        "valuePositiveInt": {
          "description": "If the parameter is a data type.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_valuePositiveInt": {
          "description": "Extensions for valuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "valueString": {
          "description": "If the parameter is a data type.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueTime": {
          "description": "If the parameter is a data type.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_valueTime": {
          "description": "Extensions for valueTime",
          "$ref": "#/definitions/Element"
        },
        "valueUnsignedInt": {
          "description": "If the parameter is a data type.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_valueUnsignedInt": {
          "description": "Extensions for valueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "valueUri": {
          "description": "If the parameter is a data type.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUri": {
          "description": "Extensions for valueUri",
          "$ref": "#/definitions/Element"
        },
        "valueUrl": {
          "description": "If the parameter is a data type.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUrl": {
          "description": "Extensions for valueUrl",
          "$ref": "#/definitions/Element"
        },
        "valueUuid": {
          "description": "If the parameter is a data type.",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_valueUuid": {
          "description": "Extensions for valueUuid",
          "$ref": "#/definitions/Element"
        },
        "valueAddress": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Address"
        },
        "valueAge": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Age"
        },
        "valueAnnotation": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Annotation"
        },
        "valueAttachment": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Attachment"
        },
        "valueCodeableConcept": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "valueCoding": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Coding"
        },
        "valueContactPoint": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/ContactPoint"
        },
        "valueCount": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Count"
        },
        "valueDistance": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Distance"
        },
        "valueDuration": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Duration"
        },
        "valueHumanName": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/HumanName"
        },
        "valueIdentifier": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Identifier"
        },
        "valueMoney": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Money"
        },
        "valuePeriod": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Period"
        },
        "valueQuantity": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Quantity"
        },
        "valueRange": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Range"
        },
        "valueRatio": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Ratio"
        },
        "valueReference": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Reference"
        },
        "valueSampledData": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/SampledData"
        },
        "valueSignature": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Signature"
        },
        "valueTiming": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Timing"
        },
        "valueContactDetail": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/ContactDetail"
        },
        "valueContributor": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Contributor"
        },
        "valueDataRequirement": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/DataRequirement"
        },
        "valueExpression": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Expression"
        },
        "valueParameterDefinition": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "valueRelatedArtifact": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "valueTriggerDefinition": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "valueUsageContext": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/UsageContext"
        },
        "valueDosage": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Dosage"
        },
        "valueMeta": {
          "description": "If the parameter is a data type.",
          "$ref": "#/definitions/Meta"
        },
        "resource": {
          "description": "If the parameter is a whole resource.",
          "$ref": "#/definitions/ResourceList"
        },
        "part": {
          "description": "A named part of a multi-part parameter.",
          "items": {
            "$ref": "#/definitions/Parameters_Parameter"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "Patient": {
      "description": "Demographics and other administrative information about an individual or animal receiving care or other health-related services.",
      "properties": {
        "resourceType": {
          "description": "This is a Patient resource",
          "const": "Patient"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "An identifier for this patient.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "active": {
          "description": "Whether this patient record is in active use. \nMany systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization\u0027s business rules.\n\nIt is often used to filter patient lists to exclude inactive patients\n\nDeceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.",
          "$ref": "#/definitions/boolean"
        },
        "_active": {
          "description": "Extensions for active",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A name associated with the individual.",
          "items": {
            "$ref": "#/definitions/HumanName"
          },
          "type": "array"
        },
        "telecom": {
          "description": "A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.",
          "items": {
            "$ref": "#/definitions/ContactPoint"
          },
          "type": "array"
        },
        "gender": {
          "description": "Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.",
          "enum": [
            "male",
            "female",
            "other",
            "unknown"
          ]
        },
        "_gender": {
          "description": "Extensions for gender",
          "$ref": "#/definitions/Element"
        },
        "birthDate": {
          "description": "The date of birth for the individual.",
          "$ref": "#/definitions/date"
        },
        "_birthDate": {
          "description": "Extensions for birthDate",
          "$ref": "#/definitions/Element"
        },
        "deceasedBoolean": {
          "description": "Indicates if the individual is deceased or not.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_deceasedBoolean": {
          "description": "Extensions for deceasedBoolean",
          "$ref": "#/definitions/Element"
        },
        "deceasedDateTime": {
          "description": "Indicates if the individual is deceased or not.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_deceasedDateTime": {
          "description": "Extensions for deceasedDateTime",
          "$ref": "#/definitions/Element"
        },
        "address": {
          "description": "An address for the individual.",
          "items": {
            "$ref": "#/definitions/Address"
          },
          "type": "array"
        },
        "maritalStatus": {
          "description": "This field contains a patient\u0027s most recent marital (civil) status.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "multipleBirthBoolean": {
          "description": "Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_multipleBirthBoolean": {
          "description": "Extensions for multipleBirthBoolean",
          "$ref": "#/definitions/Element"
        },
        "multipleBirthInteger": {
          "description": "Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_multipleBirthInteger": {
          "description": "Extensions for multipleBirthInteger",
          "$ref": "#/definitions/Element"
        },
        "photo": {
          "description": "Image of the patient.",
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "type": "array"
        },
        "contact": {
          "description": "A contact party (e.g. guardian, partner, friend) for the patient.",
          "items": {
            "$ref": "#/definitions/Patient_Contact"
          },
          "type": "array"
        },
        "communication": {
          "description": "A language which may be used to communicate with the patient about his or her health.",
          "items": {
            "$ref": "#/definitions/Patient_Communication"
          },
          "type": "array"
        },
        "generalPractitioner": {
          "description": "Patient\u0027s nominated care provider.",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "type": "array"
        },
        "managingOrganization": {
          "description": "Organization that is the custodian of the patient record.",
          "$ref": "#/definitions/Reference"
        },
        "link": {
          "description": "Link to another patient resource that concerns the same actual patient.",
          "items": {
            "$ref": "#/definitions/Patient_Link"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "Patient_Contact": {
      "description": "Demographics and other administrative information about an individual or animal receiving care or other health-related services.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "relationship": {
          "description": "The nature of the relationship between the patient and the contact person.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "name": {
          "description": "A name associated with the contact person.",
          "$ref": "#/definitions/HumanName"
        },
        "telecom": {
          "description": "A contact detail for the person, e.g. a telephone number or an email address.",
          "items": {
            "$ref": "#/definitions/ContactPoint"
          },
          "type": "array"
        },
        "address": {
          "description": "Address for the contact person.",
          "$ref": "#/definitions/Address"
        },
        "gender": {
          "description": "Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.",
          "enum": [
            "male",
            "female",
            "other",
            "unknown"
          ]
        },
        "_gender": {
          "description": "Extensions for gender",
          "$ref": "#/definitions/Element"
        },
        "organization": {
          "description": "Organization on behalf of which the contact is acting or for which the contact is working.",
          "$ref": "#/definitions/Reference"
        },
        "period": {
          "description": "The period during which this contact person or organization is valid to be contacted relating to this patient.",
          "$ref": "#/definitions/Period"
        }
      },
      "additionalProperties": false
    },
    "Patient_Communication": {
      "description": "Demographics and other administrative information about an individual or animal receiving care or other health-related services.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "language": {
          "description": "The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. \"en\" for English, or \"en-US\" for American English versus \"en-EN\" for England English.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "preferred": {
          "description": "Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).",
          "$ref": "#/definitions/boolean"
        },
        "_preferred": {
          "description": "Extensions for preferred",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "language"
      ]
    },
    "Patient_Link": {
      "description": "Demographics and other administrative information about an individual or animal receiving care or other health-related services.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "other": {
          "description": "The other patient resource that the link refers to.",
          "$ref": "#/definitions/Reference"
        },
        "type": {
          "description": "The type of link between this patient resource and another patient resource.",
          "enum": [
            "replaced-by",
            "replaces",
            "refer",
            "seealso"
          ]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "other"
      ]
    },
    "SearchParameter": {
      "description": "A search parameter that defines a named search item that can be used to search/filter on a resource.",
      "properties": {
        "resourceType": {
          "description": "This is a SearchParameter resource",
          "const": "SearchParameter"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "url": {
          "description": "An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this search parameter is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the search parameter is stored on different servers.",
          "$ref": "#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "version": {
          "description": "The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "derivedFrom": {
          "description": "Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. i.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.",
          "$ref": "#/definitions/canonical"
        },
        "status": {
          "description": "The status of this search parameter. Enables tracking the life-cycle of the content.",
          "enum": [
            "draft",
            "active",
            "retired",
            "unknown"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "experimental": {
          "description": "A Boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
          "$ref": "#/definitions/boolean"
        },
        "_experimental": {
          "description": "Extensions for experimental",
          "$ref": "#/definitions/Element"
        },
        "date": {
          "description": "The date  (and optionally time) when the search parameter was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.",
          "$ref": "#/definitions/dateTime"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "publisher": {
          "description": "The name of the organization or individual that published the search parameter.",
          "$ref": "#/definitions/string"
        },
        "_publisher": {
          "description": "Extensions for publisher",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the publisher.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "description": {
          "description": "And how it used.",
          "$ref": "#/definitions/markdown"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "useContext": {
          "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate search parameter instances.",
          "items": {
            "$ref": "#/definitions/UsageContext"
          },
          "type": "array"
        },
        "jurisdiction": {
          "description": "A legal or geographic region in which the search parameter is intended to be used.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "purpose": {
          "description": "Explanation of why this search parameter is needed and why it has been designed as it has.",
          "$ref": "#/definitions/markdown"
        },
        "_purpose": {
          "description": "Extensions for purpose",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "The code used in the URL or the parameter name in a parameters resource for this search parameter.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "base": {
          "description": "The base resource type(s) that this search parameter can be used against.",
          "items": {
            "$ref": "#/definitions/code"
          },
          "type": "array"
        },
        "_base": {
          "description": "Extensions for base",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of value that a search parameter may contain, and how the content is interpreted.",
          "enum": [
            "number",
            "date",
            "string",
            "token",
            "reference",
            "composite",
            "quantity",
            "uri",
            "special"
          ]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "expression": {
          "description": "A FHIRPath expression that returns a set of elements for the search parameter.",
          "$ref": "#/definitions/string"
        },
        "_expression": {
          "description": "Extensions for expression",
          "$ref": "#/definitions/Element"
        },
        "xpath": {
          "description": "An XPath expression that returns a set of elements for the search parameter.",
          "$ref": "#/definitions/string"
        },
        "_xpath": {
          "description": "Extensions for xpath",
          "$ref": "#/definitions/Element"
        },
        "xpathUsage": {
          "description": "How the search parameter relates to the set of elements returned by evaluating the xpath query.",
          "enum": [
            "normal",
            "phonetic",
            "nearby",
            "distance",
            "other"
          ]
        },
        "_xpathUsage": {
          "description": "Extensions for xpathUsage",
          "$ref": "#/definitions/Element"
        },
        "target": {
          "description": "Types of resource (if a resource is referenced).",
          "items": {
            "$ref": "#/definitions/code"
          },
          "type": "array"
        },
        "_target": {
          "description": "Extensions for target",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "multipleOr": {
          "description": "Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match.",
          "$ref": "#/definitions/boolean"
        },
        "_multipleOr": {
          "description": "Extensions for multipleOr",
          "$ref": "#/definitions/Element"
        },
        "multipleAnd": {
          "description": "Whether multiple parameters are allowed - e.g. more than one parameter with the same name. The search matches if all the parameters match.",
          "$ref": "#/definitions/boolean"
        },
        "_multipleAnd": {
          "description": "Extensions for multipleAnd",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "Comparators supported for the search parameter.",
          "items": {
            "enum": [
              "eq",
              "ne",
              "gt",
              "lt",
              "ge",
              "le",
              "sa",
              "eb",
              "ap"
            ]
          },
          "type": "array"
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "modifier": {
          "description": "A modifier supported for the search parameter.",
          "items": {
            "enum": [
              "missing",
              "exact",
              "contains",
              "not",
              "text",
              "in",
              "not-in",
              "below",
              "above",
              "type",
              "identifier",
              "ofType"
            ]
          },
          "type": "array"
        },
        "_modifier": {
          "description": "Extensions for modifier",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "chain": {
          "description": "Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_chain": {
          "description": "Extensions for chain",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "component": {
          "description": "Used to define the parts of a composite search parameter.",
          "items": {
            "$ref": "#/definitions/SearchParameter_Component"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "SearchParameter_Component": {
      "description": "A search parameter that defines a named search item that can be used to search/filter on a resource.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "definition": {
          "description": "The definition of the search parameter that describes this part.",
          "$ref": "#/definitions/canonical"
        },
        "expression": {
          "description": "A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression.",
          "$ref": "#/definitions/string"
        },
        "_expression": {
          "description": "Extensions for expression",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "definition"
      ]
    },
    "Slot": {
      "description": "A slot of time on a schedule that may be available for booking appointments.",
      "properties": {
        "resourceType": {
          "description": "This is a Slot resource",
          "const": "Slot"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "External Ids for this item.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "serviceCategory": {
          "description": "A broad categorization of the service that is to be performed during this appointment.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "serviceType": {
          "description": "The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "specialty": {
          "description": "The specialty of a practitioner that would be required to perform the service requested in this appointment.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "appointmentType": {
          "description": "The style of appointment or patient that may be booked in the slot (not service type).",
          "$ref": "#/definitions/CodeableConcept"
        },
        "schedule": {
          "description": "The schedule resource that this slot defines an interval of status information.",
          "$ref": "#/definitions/Reference"
        },
        "status": {
          "description": "busy | free | busy-unavailable | busy-tentative | entered-in-error.",
          "enum": [
            "busy",
            "free",
            "busy-unavailable",
            "busy-tentative",
            "entered-in-error"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "start": {
          "description": "Date/Time that the slot is to begin.",
          "$ref": "#/definitions/instant"
        },
        "_start": {
          "description": "Extensions for start",
          "$ref": "#/definitions/Element"
        },
        "end": {
          "description": "Date/Time that the slot is to conclude.",
          "$ref": "#/definitions/instant"
        },
        "_end": {
          "description": "Extensions for end",
          "$ref": "#/definitions/Element"
        },
        "overbooked": {
          "description": "This slot has already been overbooked, appointments are unlikely to be accepted for this time.",
          "$ref": "#/definitions/boolean"
        },
        "_overbooked": {
          "description": "Extensions for overbooked",
          "$ref": "#/definitions/Element"
        },
        "comment": {
          "description": "Comments on the slot to describe any extended information. Such as custom constraints on the slot.",
          "$ref": "#/definitions/string"
        },
        "_comment": {
          "description": "Extensions for comment",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": [
        "schedule",
        "resourceType"
      ]
    },
    "ValueSet": {
      "description": "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
      "properties": {
        "resourceType": {
          "description": "This is a ValueSet resource",
          "const": "ValueSet"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "url": {
          "description": "An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.",
          "$ref": "#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "identifier": {
          "description": "A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.",
          "items": {
            "$ref": "#/definitions/Identifier"
          },
          "type": "array"
        },
        "version": {
          "description": "The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "title": {
          "description": "A short, descriptive, user-friendly title for the value set.",
          "$ref": "#/definitions/string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "status": {
          "description": "The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.",
          "enum": [
            "draft",
            "active",
            "retired",
            "unknown"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "experimental": {
          "description": "A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
          "$ref": "#/definitions/boolean"
        },
        "_experimental": {
          "description": "Extensions for experimental",
          "$ref": "#/definitions/Element"
        },
        "date": {
          "description": "The date (and optionally time) when the value set was created or revised (e.g. the \u0027content logical definition\u0027).",
          "$ref": "#/definitions/dateTime"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "publisher": {
          "description": "The name of the organization or individual that published the value set.",
          "$ref": "#/definitions/string"
        },
        "_publisher": {
          "description": "Extensions for publisher",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the publisher.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "description": {
          "description": "A free text natural language description of the value set from a consumer\u0027s perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.",
          "$ref": "#/definitions/markdown"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "useContext": {
          "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.",
          "items": {
            "$ref": "#/definitions/UsageContext"
          },
          "type": "array"
        },
        "jurisdiction": {
          "description": "A legal or geographic region in which the value set is intended to be used.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "immutable": {
          "description": "If this is set to \u0027true\u0027, then no new versions of the content logical definition can be created.  Note: Other metadata might still change.",
          "$ref": "#/definitions/boolean"
        },
        "_immutable": {
          "description": "Extensions for immutable",
          "$ref": "#/definitions/Element"
        },
        "purpose": {
          "description": "Explanation of why this value set is needed and why it has been designed as it has.",
          "$ref": "#/definitions/markdown"
        },
        "_purpose": {
          "description": "Extensions for purpose",
          "$ref": "#/definitions/Element"
        },
        "copyright": {
          "description": "A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.",
          "$ref": "#/definitions/markdown"
        },
        "_copyright": {
          "description": "Extensions for copyright",
          "$ref": "#/definitions/Element"
        },
        "compose": {
          "description": "A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).",
          "$ref": "#/definitions/ValueSet_Compose"
        },
        "expansion": {
          "description": "A value set can also be \"expanded\", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.",
          "$ref": "#/definitions/ValueSet_Expansion"
        }
      },
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "ValueSet_Compose": {
      "description": "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "lockedDate": {
          "description": "The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.",
          "$ref": "#/definitions/date"
        },
        "_lockedDate": {
          "description": "Extensions for lockedDate",
          "$ref": "#/definitions/Element"
        },
        "inactive": {
          "description": "Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive \u003d true, inactive codes are to be included in the expansion, if inactive \u003d false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).",
          "$ref": "#/definitions/boolean"
        },
        "_inactive": {
          "description": "Extensions for inactive",
          "$ref": "#/definitions/Element"
        },
        "include": {
          "description": "Include one or more codes from a code system or other value set(s).",
          "items": {
            "$ref": "#/definitions/ValueSet_Include"
          },
          "type": "array"
        },
        "exclude": {
          "description": "Exclude one or more codes from the value set based on code system filters and/or other value sets.",
          "items": {
            "$ref": "#/definitions/ValueSet_Include"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "include"
      ]
    },
    "ValueSet_Include": {
      "description": "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "system": {
          "description": "An absolute URI which is the code system from which the selected codes come from.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "version": {
          "description": "The version of the code system that the codes are selected from, or the special version \u0027*\u0027 for all versions.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "concept": {
          "description": "Specifies a concept to be included or excluded.",
          "items": {
            "$ref": "#/definitions/ValueSet_Concept"
          },
          "type": "array"
        },
        "filter": {
          "description": "Select concepts by specify a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified, they SHALL all be true.",
          "items": {
            "$ref": "#/definitions/ValueSet_Filter"
          },
          "type": "array"
        },
        "valueSet": {
          "description": "Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the union of the contents of all of the referenced value sets.",
          "items": {
            "$ref": "#/definitions/canonical"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "ValueSet_Concept": {
      "description": "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "Specifies a code for the concept to be included or excluded.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "display": {
          "description": "The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.",
          "$ref": "#/definitions/string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        },
        "designation": {
          "description": "Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.",
          "items": {
            "$ref": "#/definitions/ValueSet_Designation"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "ValueSet_Designation": {
      "description": "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "language": {
          "description": "The language this designation is defined for.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "use": {
          "description": "A code that represents types of uses of designations.",
          "$ref": "#/definitions/Coding"
        },
        "value": {
          "description": "The text value for this designation.",
          "$ref": "#/definitions/string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ValueSet_Filter": {
      "description": "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "property": {
          "description": "A code that identifies a property or a filter defined in the code system.",
          "$ref": "#/definitions/code"
        },
        "_property": {
          "description": "Extensions for property",
          "$ref": "#/definitions/Element"
        },
        "op": {
          "description": "The kind of operation to perform as a part of the filter criteria.",
          "enum": [
            "\u003d",
            "is-a",
            "descendent-of",
            "is-not-a",
            "regex",
            "in",
            "not-in",
            "generalizes",
            "exists"
          ]
        },
        "_op": {
          "description": "Extensions for op",
          "$ref": "#/definitions/Element"
        },
        "value": {
          "description": "The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is \u0027regex\u0027, or one of the values (true and false), when the operation is \u0027exists\u0027.",
          "$ref": "#/definitions/string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ValueSet_Expansion": {
      "description": "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.",
          "$ref": "#/definitions/uri"
        },
        "_identifier": {
          "description": "Extensions for identifier",
          "$ref": "#/definitions/Element"
        },
        "timestamp": {
          "description": "The time at which the expansion was produced by the expanding system.",
          "$ref": "#/definitions/dateTime"
        },
        "_timestamp": {
          "description": "Extensions for timestamp",
          "$ref": "#/definitions/Element"
        },
        "total": {
          "description": "The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.",
          "$ref": "#/definitions/integer"
        },
        "_total": {
          "description": "Extensions for total",
          "$ref": "#/definitions/Element"
        },
        "offset": {
          "description": "If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.",
          "$ref": "#/definitions/integer"
        },
        "_offset": {
          "description": "Extensions for offset",
          "$ref": "#/definitions/Element"
        },
        "parameter": {
          "description": "A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.",
          "items": {
            "$ref": "#/definitions/ValueSet_Parameter"
          },
          "type": "array"
        },
        "contains": {
          "description": "The codes that are contained in the value set expansion.",
          "items": {
            "$ref": "#/definitions/ValueSet_Contains"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "ValueSet_Parameter": {
      "description": "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the input parameter to the $expand operation; may be a server-assigned name for additional default or other server-supplied parameters used to control the expansion process.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "valueString": {
          "description": "The value of the parameter.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueBoolean": {
          "description": "The value of the parameter.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "#/definitions/Element"
        },
        "valueInteger": {
          "description": "The value of the parameter.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueDecimal": {
          "description": "The value of the parameter.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_valueDecimal": {
          "description": "Extensions for valueDecimal",
          "$ref": "#/definitions/Element"
        },
        "valueUri": {
          "description": "The value of the parameter.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUri": {
          "description": "Extensions for valueUri",
          "$ref": "#/definitions/Element"
        },
        "valueCode": {
          "description": "The value of the parameter.",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_valueCode": {
          "description": "Extensions for valueCode",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "The value of the parameter.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ValueSet_Contains": {
      "description": "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "system": {
          "description": "An absolute URI which is the code system in which the code for this item in the expansion is defined.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "abstract": {
          "description": "If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.",
          "$ref": "#/definitions/boolean"
        },
        "_abstract": {
          "description": "Extensions for abstract",
          "$ref": "#/definitions/Element"
        },
        "inactive": {
          "description": "If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether an concept is inactive (and it may depend on the context of use).",
          "$ref": "#/definitions/boolean"
        },
        "_inactive": {
          "description": "Extensions for inactive",
          "$ref": "#/definitions/Element"
        },
        "version": {
          "description": "The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "display": {
          "description": "The recommended display for this item in the expansion.",
          "$ref": "#/definitions/string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        },
        "designation": {
          "description": "Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.",
          "items": {
            "$ref": "#/definitions/ValueSet_Designation"
          },
          "type": "array"
        },
        "contains": {
          "description": "Other codes and entries contained under this entry in the hierarchy.",
          "items": {
            "$ref": "#/definitions/ValueSet_Contains"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    }
  }
}